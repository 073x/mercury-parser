{"version":3,"file":null,"sources":["mercury.js","../src/utils/dom/constants.js","../src/utils/dom/strip-junk-tags.js","../src/extractors/generic/content/scoring/constants.js","../src/utils/dom/make-links-absolute.js","../scripts/templates/insert-values.js","../scripts/templates/index.js","../scripts/templates/custom-extractor.js","../scripts/templates/custom-extractor-test.js","../scripts/generate-custom-parser.js"],"sourcesContent":["'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar _regeneratorRuntime = _interopDefault(require('babel-runtime/regenerator'));\nvar _extends = _interopDefault(require('babel-runtime/helpers/extends'));\nvar _asyncToGenerator = _interopDefault(require('babel-runtime/helpers/asyncToGenerator'));\nvar URL = _interopDefault(require('url'));\nvar babelPolyfill = require('babel-polyfill');\nvar cheerio = _interopDefault(require('cheerio'));\nvar _Promise = _interopDefault(require('babel-runtime/core-js/promise'));\nvar request = _interopDefault(require('request'));\nvar _Reflect$ownKeys = _interopDefault(require('babel-runtime/core-js/reflect/own-keys'));\nvar stringDirection = _interopDefault(require('string-direction'));\nvar _getIterator = _interopDefault(require('babel-runtime/core-js/get-iterator'));\nvar _defineProperty = _interopDefault(require('babel-runtime/helpers/defineProperty'));\nvar _slicedToArray = _interopDefault(require('babel-runtime/helpers/slicedToArray'));\nvar _typeof = _interopDefault(require('babel-runtime/helpers/typeof'));\nvar validUrl = _interopDefault(require('valid-url'));\nvar moment = _interopDefault(require('moment'));\nvar wuzzy = _interopDefault(require('wuzzy'));\nvar difflib = _interopDefault(require('difflib'));\nvar _Array$from = _interopDefault(require('babel-runtime/core-js/array/from'));\nvar ellipsize = _interopDefault(require('ellipsize'));\n\nvar _marked = [range].map(_regeneratorRuntime.mark);\n\nfunction range() {\n  var start = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];\n  var end = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];\n  return _regeneratorRuntime.wrap(function range$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(start <= end)) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 3;\n          return start += 1;\n\n        case 3:\n          _context.next = 0;\n          break;\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked[0], this);\n}\n\n// extremely simple url validation as a first step\nfunction validateUrl(_ref) {\n  var hostname = _ref.hostname;\n\n  // If this isn't a valid url, return an error message\n  return !!hostname;\n}\n\nvar Errors = {\n  badUrl: {\n    error: true,\n    messages: 'The url parameter passed does not look like a valid URL. Please check your data and try again.'\n  }\n};\n\nvar REQUEST_HEADERS = {\n  'User-Agent': 'Readability - http://readability.com/about/'\n};\n\n// The number of milliseconds to attempt to fetch a resource before timing out.\nvar FETCH_TIMEOUT = 10000;\n\n// Content types that we do not extract content from\nvar BAD_CONTENT_TYPES = ['audio/mpeg', 'image/gif', 'image/jpeg', 'image/jpg'];\n\nvar BAD_CONTENT_TYPES_RE = new RegExp('^(' + BAD_CONTENT_TYPES.join('|') + ')$', 'i');\n\n// Use this setting as the maximum size an article can be\n// for us to attempt parsing. Defaults to 5 MB.\nvar MAX_CONTENT_LENGTH = 5242880;\n\nfunction get(options) {\n  return new _Promise(function (resolve, reject) {\n    request(options, function (err, response, body) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({ body: body, response: response });\n      }\n    });\n  });\n}\n\n// Evaluate a response to ensure it's something we should be keeping.\n// This does not validate in the sense of a response being 200 level or\n// not. Validation here means that we haven't found reason to bail from\n// further processing of this url.\n\nfunction validateResponse(response) {\n  var parseNon2xx = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n  // Check if we got a valid status code\n  if (response.statusMessage !== 'OK') {\n    if (!response.statusCode) {\n      throw new Error('Unable to fetch content. Original exception was ' + response.error);\n    } else if (!parseNon2xx) {\n      throw new Error('Resource returned a response status code of ' + response.statusCode + ' and resource was instructed to reject non-2xx level status codes.');\n    }\n  }\n\n  var _response$headers = response.headers;\n  var contentType = _response$headers['content-type'];\n  var contentLength = _response$headers['content-length'];\n\n  // Check that the content is not in BAD_CONTENT_TYPES\n\n  if (BAD_CONTENT_TYPES_RE.test(contentType)) {\n    throw new Error('Content-type for this resource was ' + contentType + ' and is not allowed.');\n  }\n\n  // Check that the content length is below maximum\n  if (contentLength > MAX_CONTENT_LENGTH) {\n    throw new Error('Content for this resource was too large. Maximum content length is ' + MAX_CONTENT_LENGTH + '.');\n  }\n\n  return true;\n}\n\n// Set our response attribute to the result of fetching our URL.\n// TODO: This should gracefully handle timeouts and raise the\n//       proper exceptions on the many failure cases of HTTP.\n// TODO: Ensure we are not fetching something enormous. Always return\n//       unicode content for HTML, with charset conversion.\n\nvar fetchResource = (function () {\n  var _ref2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, parsedUrl) {\n    var options, _ref3, response, body;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            parsedUrl = parsedUrl || URL.parse(encodeURI(url));\n\n            options = {\n              url: parsedUrl,\n              headers: _extends({}, REQUEST_HEADERS),\n              timeout: FETCH_TIMEOUT,\n              // Don't set encoding; fixes issues\n              // w/gzipped responses\n              encoding: null,\n              // Accept cookies\n              jar: true,\n              // Accept and decode gzip\n              gzip: true,\n              // Follow any redirect\n              followAllRedirects: true\n            };\n            _context.next = 4;\n            return get(options);\n\n          case 4:\n            _ref3 = _context.sent;\n            response = _ref3.response;\n            body = _ref3.body;\n            _context.prev = 7;\n\n            validateResponse(response);\n            return _context.abrupt('return', { body: body, response: response });\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context['catch'](7);\n            return _context.abrupt('return', Errors.badUrl);\n\n          case 15:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[7, 12]]);\n  }));\n\n  function fetchResource(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  }\n\n  return fetchResource;\n})();\n\nfunction convertMetaProp($, from, to) {\n  $('meta[' + from + ']').each(function (_, node) {\n    var $node = $(node);\n\n    var value = $node.attr(from);\n    $node.attr(to, value);\n    $node.removeAttr(from);\n  });\n\n  return $;\n}\n\n// For ease of use in extracting from meta tags,\n// replace the \"content\" attribute on meta tags with the\n// \"value\" attribute.\n//\n// In addition, normalize 'property' attributes to 'name' for ease of\n// querying later. See, e.g., og or twitter meta tags.\n\nfunction normalizeMetaTags($) {\n  $ = convertMetaProp($, 'content', 'value');\n  $ = convertMetaProp($, 'property', 'name');\n  return $;\n}\n\nvar IS_LINK = new RegExp('https?://', 'i');\nvar IS_IMAGE = new RegExp('.(png|gif|jpe?g)', 'i');\n\nvar TAGS_TO_REMOVE = ['script', 'style', 'form'].join(',');\n\n// Convert all instances of images with potentially\n// lazy loaded images into normal images.\n// Many sites will have img tags with no source, or an image tag with a src\n// attribute that a is a placeholer. We need to be able to properly fill in\n// the src attribute so the images are no longer lazy loaded.\nfunction convertLazyLoadedImages($) {\n  $('img').each(function (_, img) {\n    _Reflect$ownKeys(img.attribs).forEach(function (attr) {\n      var value = img.attribs[attr];\n\n      if (attr !== 'src' && IS_LINK.test(value) && IS_IMAGE.test(value)) {\n        $(img).attr('src', value);\n      }\n    });\n  });\n\n  return $;\n}\n\nfunction isComment(index, node) {\n  return node.type === 'comment';\n}\n\nfunction cleanComments($) {\n  $.root().find('*').contents().filter(isComment).remove();\n\n  return $;\n}\n\nfunction clean($) {\n  $(TAGS_TO_REMOVE).remove();\n\n  $ = cleanComments($);\n  return $;\n}\n\nvar Resource = {\n\n  // Create a Resource.\n  //\n  // :param url: The URL for the document we should retrieve.\n  // :param response: If set, use as the response rather than\n  //                  attempting to fetch it ourselves. Expects a\n  //                  string.\n  create: function create(url, preparedResponse, parsedUrl) {\n    var _this = this;\n\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n      var result, validResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              result = void 0;\n\n              if (!preparedResponse) {\n                _context.next = 6;\n                break;\n              }\n\n              validResponse = {\n                statusMessage: 'OK',\n                statusCode: 200,\n                headers: {\n                  'content-type': 'text/html',\n                  'content-length': 500\n                }\n              };\n\n\n              result = { body: preparedResponse, response: validResponse };\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.next = 8;\n              return fetchResource(url, parsedUrl);\n\n            case 8:\n              result = _context.sent;\n\n            case 9:\n              if (!result.error) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt('return', result);\n\n            case 11:\n              return _context.abrupt('return', _this.generateDoc(result));\n\n            case 12:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this);\n    }))();\n  },\n  generateDoc: function generateDoc(_ref) {\n    var content = _ref.body;\n    var response = _ref.response;\n    var contentType = response.headers['content-type'];\n\n    // TODO: Implement is_text function from\n    // https://github.com/ReadabilityHoldings/readability/blob/8dc89613241d04741ebd42fa9fa7df1b1d746303/readability/utils/text.py#L57\n\n    if (!contentType.includes('html') && !contentType.includes('text')) {\n      throw new Error('Content does not appear to be text.');\n    }\n\n    var $ = cheerio.load(content, { normalizeWhitespace: true });\n\n    if ($.root().children().length === 0) {\n      throw new Error('No children, likely a bad parse.');\n    }\n\n    $ = normalizeMetaTags($);\n    $ = convertLazyLoadedImages($);\n    $ = clean($);\n\n    return $;\n  }\n};\n\nvar NYMagExtractor = {\n  domain: 'nymag.com',\n  content: {\n    // Order by most likely. Extractor will stop on first occurrence\n    selectors: ['div.article-content', 'section.body', 'article.article'],\n\n    // Selectors to remove from the extracted content\n    clean: ['.ad', '.single-related-story'],\n\n    // Object of tranformations to make on matched elements\n    // Each key is the selector, each value is the tag to\n    // transform to.\n    // If a function is given, it should return a string\n    // to convert to or nothing (in which case it will not perform\n    // the transformation.\n    transforms: {\n      // Convert h1s to h2s\n      h1: 'h2',\n\n      // Convert lazy-loaded noscript images to figures\n      noscript: function noscript($node) {\n        var $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'figure';\n        }\n\n        return null;\n      }\n    }\n  },\n\n  title: {\n    selectors: ['h1.lede-feature-title', 'h1.headline-primary', 'h1']\n  },\n\n  author: {\n    selectors: ['.by-authors', '.lede-feature-author']\n  },\n\n  dek: {\n    selectors: ['.lede-feature-teaser']\n  },\n\n  date_published: {\n    selectors: [['time.article-timestamp[datetime]', 'datetime'], 'time.article-timestamp']\n  }\n};\n\nvar BloggerExtractor = {\n  domain: 'blogspot.com',\n  content: {\n    // Blogger is insane and does not load its content\n    // initially in the page, but it's all there\n    // in noscript\n    selectors: ['.post-content noscript'],\n\n    // Selectors to remove from the extracted content\n    clean: [],\n\n    // Convert the noscript tag to a div\n    transforms: {\n      noscript: 'div'\n    }\n  },\n\n  author: {\n    selectors: ['.post-author-name']\n  },\n\n  title: {\n    selectors: ['h2.title']\n  },\n\n  date_published: {\n    selectors: ['span.publishdate']\n  }\n};\n\nvar WikipediaExtractor = {\n  domain: 'wikipedia.org',\n  content: {\n    selectors: ['#mw-content-text'],\n\n    defaultCleaner: false,\n\n    // transform top infobox to an image with caption\n    transforms: {\n      '.infobox img': function infoboxImg($node) {\n        var $parent = $node.parents('.infobox');\n        // Only prepend the first image in .infobox\n        if ($parent.children('img').length === 0) {\n          $parent.prepend($node);\n        }\n      },\n      '.infobox caption': 'figcaption',\n      '.infobox': 'figure'\n    },\n\n    // Selectors to remove from the extracted content\n    clean: ['.mw-editsection', 'figure tr, figure td, figure tbody', '#toc', '.navbox']\n\n  },\n\n  author: 'Wikipedia Contributors',\n\n  title: {\n    selectors: ['h2.title']\n  },\n\n  date_published: {\n    selectors: ['#footer-info-lastmod']\n  }\n\n};\n\nvar TwitterExtractor = {\n  domain: 'twitter.com',\n\n  content: {\n    transforms: {\n      // We're transforming essentially the whole page here.\n      // Twitter doesn't have nice selectors, so our initial\n      // selector grabs the whole page, then we're re-writing\n      // it to fit our needs before we clean it up.\n      '.permalink[role=main]': function permalinkRoleMain($node, $) {\n        var tweets = $node.find('.tweet');\n        var $tweetContainer = $('<div id=\"TWEETS_GO_HERE\"></div>');\n        $tweetContainer.append(tweets);\n        $node.replaceWith($tweetContainer);\n      },\n\n      // Twitter wraps @ with s, which\n      // renders as a strikethrough\n      s: 'span'\n    },\n\n    selectors: ['.permalink[role=main]'],\n\n    defaultCleaner: false,\n\n    clean: ['.stream-item-footer', 'button', '.tweet-details-fixer']\n  },\n\n  author: {\n    selectors: ['.tweet.permalink-tweet .username']\n  },\n\n  date_published: {\n    selectors: [['.permalink-tweet ._timestamp[data-time-ms]', 'data-time-ms']]\n  }\n\n};\n\nvar NYTimesExtractor = {\n  title: {\n    selectors: ['.g-headline', 'h1.headline']\n  },\n\n  author: {\n    selectors: ['.g-byline', '.byline']\n  },\n\n  content: {\n    selectors: ['div.g-blocks', 'article#story'],\n\n    defaultCleaner: false,\n\n    transforms: {\n      'img.g-lazy': function imgGLazy($node) {\n        var src = $node.attr('src');\n        // const widths = $node.attr('data-widths')\n        //                   .slice(1)\n        //                   .slice(0, -1)\n        //                   .split(',');\n        // if (widths.length) {\n        //   width = widths.slice(-1);\n        // } else {\n        //   width = '900';\n        // }\n        var width = 640;\n\n        src = src.replace('{{size}}', width);\n        $node.attr('src', src);\n      }\n    },\n\n    clean: ['.ad', 'header#story-header', '.story-body-1 .lede.video', '.visually-hidden', '#newsletter-promo', '.promo', '.comments-button', '.hidden']\n  },\n\n  date_published: null,\n\n  lead_image_url: null,\n\n  dek: null,\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\nvar TheAtlanticExtractor = {\n  domain: 'www.theatlantic.com',\n  title: {\n    selectors: ['h1.hed']\n  },\n\n  author: {\n    selectors: ['article#article .article-cover-extra .metadata .byline a']\n  },\n\n  content: {\n    selectors: ['.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: null,\n\n  lead_image_url: null,\n\n  dek: null,\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar NewYorkerExtractor = {\n  domain: 'www.newyorker.com',\n  title: {\n    selectors: ['h1.title']\n  },\n\n  author: {\n    selectors: ['.contributors']\n  },\n\n  content: {\n    selectors: ['div#articleBody', 'div.articleBody'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar WiredExtractor = {\n  domain: 'www.wired.com',\n  title: {\n    selectors: ['h1.post-title']\n  },\n\n  author: {\n    selectors: ['a[rel=\"author\"]']\n  },\n\n  content: {\n    selectors: ['article.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.visually-hidden']\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar MSNExtractor = {\n  domain: 'www.msn.com',\n  title: {\n    selectors: ['h1']\n  },\n\n  author: {\n    selectors: ['span.authorname-txt']\n  },\n\n  content: {\n    selectors: ['div.richtext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span.caption']\n  },\n\n  date_published: {\n    selectors: ['span.time']\n  },\n\n  lead_image_url: {\n    selectors: []\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar YahooExtractor = {\n  domain: 'www.yahoo.com',\n  title: {\n    selectors: ['header.canvas-header']\n  },\n\n  author: {\n    selectors: ['span.provider-name']\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.content-canvas'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.figure-caption']\n  },\n\n  date_published: {\n    selectors: [['time.date[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar BuzzfeedExtractor = {\n  domain: 'www.buzzfeed.com',\n  title: {\n    selectors: ['h1[id=\"post-title\"]']\n  },\n\n  author: {\n    selectors: ['a[data-action=\"user/username\"]', 'byline__author']\n  },\n\n  content: {\n    selectors: ['#buzz_sub_buzz'],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: 'b'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.instapaper_ignore', '.suplist_list_hide .buzz_superlist_item .buzz_superlist_number_inline', '.share-box']\n  },\n\n  date_published: {\n    selectors: ['.buzz-datetime']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar WikiaExtractor = {\n  domain: 'fandom.wikia.com',\n  title: {\n    selectors: ['h1.entry-title']\n  },\n\n  author: {\n    selectors: ['.author vcard', '.fn']\n  },\n\n  content: {\n    selectors: ['.grid-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar LittleThingsExtractor = {\n  domain: 'www.littlethings.com',\n  title: {\n    selectors: ['h1.post-title']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.mainContentIntro', '.content-wrapper'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar PoliticoExtractor = {\n  domain: 'www.politico.com',\n  title: {\n    selectors: [\n    // enter title selectors\n    ['meta[name=\"og:title\"]', 'value']]\n  },\n\n  author: {\n    selectors: ['.story-main-content .byline .vcard']\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.story-main-content', '.content-group', '.story-core', '.story-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['figcaption']\n  },\n\n  date_published: {\n    selectors: [['.story-main-content .timestamp time[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [\n    // enter lead_image_url selectors\n    ['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\nvar Extractors = {\n  'nymag.com': NYMagExtractor,\n  'blogspot.com': BloggerExtractor,\n  'wikipedia.org': WikipediaExtractor,\n  'twitter.com': TwitterExtractor,\n  'www.nytimes.com': NYTimesExtractor,\n  'www.theatlantic.com': TheAtlanticExtractor,\n  'www.newyorker.com': NewYorkerExtractor,\n  'www.wired.com': WiredExtractor,\n  'www.msn.com': MSNExtractor,\n  'www.yahoo.com': YahooExtractor,\n  'www.buzzfeed.com': BuzzfeedExtractor,\n  'fandom.wikia.com': WikiaExtractor,\n  'www.littlethings.com': LittleThingsExtractor,\n  'www.politico.com': PoliticoExtractor\n\n};\n\n// Spacer images to be removed\nvar SPACER_RE = new RegExp('trans|transparent|spacer|blank', 'i');\n\n// A list of tags to strip from the output if we encounter them.\nvar STRIP_OUTPUT_TAGS = ['title', 'script', 'noscript', 'link', 'style', 'hr', 'embed', 'iframe', 'object'];\n\n// cleanAttributes\nvar REMOVE_ATTRS = ['style', 'align'];\nvar REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(function (selector) {\n  return '[' + selector + ']';\n});\nvar REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nvar WHITELIST_ATTRS = ['src', 'srcset', 'href', 'class', 'id', 'alt', 'score'];\nvar WHITELIST_ATTRS_RE = new RegExp('^(' + WHITELIST_ATTRS.join('|') + ')$', 'i');\n\n// removeEmpty\nvar REMOVE_EMPTY_TAGS = ['p'];\nvar REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(function (tag) {\n  return tag + ':empty';\n}).join(',');\n\n// cleanTags\nvar CLEAN_CONDITIONALLY_TAGS = ['ul', 'ol', 'table', 'div', 'button', 'form'].join(',');\n\n// cleanHeaders\nvar HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nvar HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nvar UNLIKELY_CANDIDATES_BLACKLIST = ['ad-break', 'adbox', 'advert', 'addthis', 'agegate', 'aux', 'blogger-labels', 'combx', 'comment', 'conversation', 'disqus', 'entry-unrelated', 'extra', 'foot',\n// 'form', // This is too generic, has too many false positives\n'header', 'hidden', 'loader', 'login', // Note: This can hit 'blogindex'.\n'menu', 'meta', 'nav', 'outbrain', 'pager', 'pagination', 'predicta', // readwriteweb inline ad box\n'presence_control_external', // lifehacker.com container full of false positives\n'popup', 'printfriendly', 'related', 'remove', 'remark', 'rss', 'share', 'shoutbox', 'sidebar', 'sociable', 'sponsor', 'taboola', 'tools'];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nvar UNLIKELY_CANDIDATES_WHITELIST = ['and', 'article', 'body', 'blogindex', 'column', 'content', 'entry-content-asset', 'format', // misuse of form\n'hfeed', 'hentry', 'hatom', 'main', 'page', 'posts', 'shadow'];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nvar DIV_TO_P_BLOCK_TAGS = ['a', 'blockquote', 'dl', 'div', 'img', 'p', 'pre', 'table'].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nvar NON_TOP_CANDIDATE_TAGS = ['br', 'b', 'i', 'label', 'hr', 'area', 'base', 'basefont', 'input', 'img', 'link', 'meta'];\n\nvar NON_TOP_CANDIDATE_TAGS_RE = new RegExp('^(' + NON_TOP_CANDIDATE_TAGS.join('|') + ')$', 'i');\n\nvar PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\nvar PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar POSITIVE_SCORE_HINTS = ['article', 'articlecontent', 'instapaper_body', 'blog', 'body', 'content', 'entry-content-asset', 'entry', 'hentry', 'main', 'Normal', 'page', 'pagination', 'permalink', 'post', 'story', 'text', '[-_]copy', // usatoday\n'\\\\Bcopy'];\n\n// The above list, joined into a matching regular expression\nvar POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar NEGATIVE_SCORE_HINTS = ['adbox', 'advert', 'author', 'bio', 'bookmark', 'bottom', 'byline', 'clear', 'com-', 'combx', 'comment', 'comment\\\\B', 'contact', 'copy', 'credit', 'crumb', 'date', 'deck', 'excerpt', 'featured', // tnr.com has a featured_content which throws us off\n'foot', 'footer', 'footnote', 'graf', 'head', 'info', 'infotext', // newscientist.com copyright\n'instapaper_ignore', 'jump', 'linebreak', 'link', 'masthead', 'media', 'meta', 'modal', 'outbrain', // slate.com junk\n'promo', 'pr_', // autoblog - press release\n'related', 'respond', 'roundcontent', // lifehacker restricted content warning\n'scroll', 'secondary', 'share', 'shopping', 'shoutbox', 'side', 'sidebar', 'sponsor', 'stamp', 'sub', 'summary', 'tags', 'tools', 'widget'];\n// The above list, joined into a matching regular expression\nvar NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nvar IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nvar EXTRANEOUS_LINK_HINTS = ['print', 'archive', 'comment', 'discuss', 'e-mail', 'email', 'share', 'reply', 'all', 'login', 'sign', 'single', 'adx', 'entry-unrelated'];\nvar EXTRANEOUS_LINK_HINTS_RE = new RegExp(EXTRANEOUS_LINK_HINTS.join('|'), 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nvar PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nvar BLOCK_LEVEL_TAGS = ['article', 'aside', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'col', 'colgroup', 'dd', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'li', 'map', 'object', 'ol', 'output', 'p', 'pre', 'progress', 'section', 'table', 'tbody', 'textarea', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nvar BLOCK_LEVEL_TAGS_RE = new RegExp('^(' + BLOCK_LEVEL_TAGS.join('|') + ')$', 'i');\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nvar candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nvar CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nvar candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nvar CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nfunction stripUnlikelyCandidates($) {\n  //  Loop through the provided document and remove any non-link nodes\n  //  that are unlikely candidates for article content.\n  //\n  //  Links are ignored because there are very often links to content\n  //  that are identified as non-body-content, but may be inside\n  //  article-like content.\n  //\n  //  :param $: a cheerio object to strip nodes from\n  //  :return $: the cleaned cheerio object\n  $('*').not('a').each(function (index, node) {\n    var $node = $(node);\n    var classes = $node.attr('class');\n    var id = $node.attr('id');\n    if (!id && !classes) return;\n\n    var classAndId = (classes || '') + ' ' + (id || '');\n    if (CANDIDATES_WHITELIST.test(classAndId)) {\n      return;\n    } else if (CANDIDATES_BLACKLIST.test(classAndId)) {\n      $node.remove();\n    }\n  });\n\n  return $;\n}\n\n// ## NOTES:\n// Another good candidate for refactoring/optimizing.\n// Very imperative code, I don't love it. - AP\n\n\n//  Given cheerio object, convert consecutive <br /> tags into\n//  <p /> tags instead.\n//\n//  :param $: A cheerio object\n\nfunction brsToPs($) {\n  var collapsing = false;\n  $('br').each(function (index, element) {\n    var nextElement = $(element).next().get(0);\n\n    if (nextElement && nextElement.tagName === 'br') {\n      collapsing = true;\n      $(element).remove();\n    } else if (collapsing) {\n      collapsing = false;\n      // $(element).replaceWith('<p />')\n      paragraphize(element, $, true);\n    }\n  });\n\n  return $;\n}\n\n// Given a node, turn it into a P if it is not already a P, and\n// make sure it conforms to the constraints of a P tag (I.E. does\n// not contain any other block tags.)\n//\n// If the node is a <br />, it treats the following inline siblings\n// as if they were its children.\n//\n// :param node: The node to paragraphize; this is a raw node\n// :param $: The cheerio object to handle dom manipulation\n// :param br: Whether or not the passed node is a br\n\nfunction paragraphize(node, $) {\n  var br = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n  var $node = $(node);\n\n  if (br) {\n    var sibling = node.nextSibling;\n    var p = $('<p></p>');\n\n    // while the next node is text or not a block level element\n    // append it to a new p node\n    while (sibling && !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))) {\n      var nextSibling = sibling.nextSibling;\n      $(sibling).appendTo(p);\n      sibling = nextSibling;\n    }\n\n    $node.replaceWith(p);\n    $node.remove();\n    return $;\n  }\n\n  return $;\n}\n\nfunction convertDivs($) {\n  $('div').each(function (index, div) {\n    var $div = $(div);\n    var convertable = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\n\n    if (convertable) {\n      convertNodeTo($div, $, 'p');\n    }\n  });\n\n  return $;\n}\n\nfunction convertSpans($) {\n  $('span').each(function (index, span) {\n    var $span = $(span);\n    var convertable = $span.parents('p, div').length === 0;\n    if (convertable) {\n      convertNodeTo($span, $, 'p');\n    }\n  });\n\n  return $;\n}\n\n// Loop through the provided doc, and convert any p-like elements to\n// actual paragraph tags.\n//\n//   Things fitting this criteria:\n//   * Multiple consecutive <br /> tags.\n//   * <div /> tags without block level elements inside of them\n//   * <span /> tags who are not children of <p /> or <div /> tags.\n//\n//   :param $: A cheerio object to search\n//   :return cheerio object with new p elements\n//   (By-reference mutation, though. Returned just for convenience.)\n\nfunction convertToParagraphs($) {\n  $ = brsToPs($);\n  $ = convertDivs($);\n  $ = convertSpans($);\n\n  return $;\n}\n\nfunction convertNodeTo($node, $) {\n  var tag = arguments.length <= 2 || arguments[2] === undefined ? 'p' : arguments[2];\n\n  var node = $node.get(0);\n  if (!node) {\n    return $;\n  }\n\n  var _$node$get = $node.get(0);\n\n  var attribs = _$node$get.attribs;\n\n  var attribString = _Reflect$ownKeys(attribs).map(function (key) {\n    return key + '=' + attribs[key];\n  }).join(' ');\n\n  $node.replaceWith('<' + tag + ' ' + attribString + '>' + $node.contents() + '</' + tag + '>');\n  return $;\n}\n\nfunction cleanForHeight($img, $) {\n  var height = parseInt($img.attr('height'), 10);\n  var width = parseInt($img.attr('width'), 10) || 20;\n\n  // Remove images that explicitly have very small heights or\n  // widths, because they are most likely shims or icons,\n  // which aren't very useful for reading.\n  if ((height || 20) < 10 || width < 10) {\n    $img.remove();\n  } else if (height) {\n    // Don't ever specify a height on images, so that we can\n    // scale with respect to width without screwing up the\n    // aspect ratio.\n    $img.removeAttr('height');\n  }\n\n  return $;\n}\n\n// Cleans out images where the source string matches transparent/spacer/etc\n// TODO This seems very aggressive - AP\nfunction removeSpacers($img, $) {\n  if (SPACER_RE.test($img.attr('src'))) {\n    $img.remove();\n  }\n\n  return $;\n}\n\nfunction cleanImages($article, $) {\n  $article.find('img').each(function (index, img) {\n    var $img = $(img);\n\n    cleanForHeight($img, $);\n    removeSpacers($img, $);\n  });\n\n  return $;\n}\n\nfunction stripJunkTags(article, $) {\n  var tags = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];\n\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  $(tags.join(','), article).remove();\n\n  return $;\n}\n\n// H1 tags are typically the article title, which should be extracted\n// by the title extractor instead. If there's less than 3 of them (<3),\n// strip them. Otherwise, turn 'em into H2s.\n\nfunction cleanHOnes(article, $) {\n  var $hOnes = $('h1', article);\n\n  if ($hOnes.length < 3) {\n    $hOnes.each(function (index, node) {\n      return $(node).remove();\n    });\n  } else {\n    $hOnes.each(function (index, node) {\n      convertNodeTo($(node), $, 'h2');\n    });\n  }\n\n  return $;\n}\n\nfunction removeAllButWhitelist($article) {\n  // $('*', article).each((index, node) => {\n  $article.find('*').each(function (index, node) {\n    node.attribs = _Reflect$ownKeys(node.attribs).reduce(function (acc, attr) {\n      if (WHITELIST_ATTRS_RE.test(attr)) {\n        return _extends({}, acc, _defineProperty({}, attr, node.attribs[attr]));\n      }\n\n      return acc;\n    }, {});\n  });\n}\n\n// function removeAttrs(article, $) {\n//   REMOVE_ATTRS.forEach((attr) => {\n//     $(`[${attr}]`, article).removeAttr(attr);\n//   });\n// }\n\n// Remove attributes like style or align\nfunction cleanAttributes($article) {\n  removeAllButWhitelist($article);\n\n  return $article;\n}\n\nfunction removeEmpty($article, $) {\n  $article.find('p').each(function (index, p) {\n    var $p = $(p);\n    if ($p.text().trim() === '') $p.remove();\n  });\n\n  return $;\n}\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nvar UNLIKELY_CANDIDATES_BLACKLIST$1 = ['ad-break', 'adbox', 'advert', 'addthis', 'agegate', 'aux', 'blogger-labels', 'combx', 'comment', 'conversation', 'disqus', 'entry-unrelated', 'extra', 'foot', 'form', 'header', 'hidden', 'loader', 'login', // Note: This can hit 'blogindex'.\n'menu', 'meta', 'nav', 'pager', 'pagination', 'predicta', // readwriteweb inline ad box\n'presence_control_external', // lifehacker.com container full of false positives\n'popup', 'printfriendly', 'related', 'remove', 'remark', 'rss', 'share', 'shoutbox', 'sidebar', 'sociable', 'sponsor', 'tools'];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nvar UNLIKELY_CANDIDATES_WHITELIST$1 = ['and', 'article', 'body', 'blogindex', 'column', 'content', 'entry-content-asset', 'format', // misuse of form\n'hfeed', 'hentry', 'hatom', 'main', 'page', 'posts', 'shadow'];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nvar DIV_TO_P_BLOCK_TAGS$1 = ['a', 'blockquote', 'dl', 'div', 'img', 'p', 'pre', 'table'].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nvar NON_TOP_CANDIDATE_TAGS$1 = ['br', 'b', 'i', 'label', 'hr', 'area', 'base', 'basefont', 'input', 'img', 'link', 'meta'];\n\nvar NON_TOP_CANDIDATE_TAGS_RE$1 = new RegExp('^(' + NON_TOP_CANDIDATE_TAGS$1.join('|') + ')$', 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nvar HNEWS_CONTENT_SELECTORS$1 = [['.hentry', '.entry-content'], ['entry', '.entry-content'], ['.entry', '.entry_content'], ['.post', '.postbody'], ['.post', '.post_body'], ['.post', '.post-body']];\n\nvar PHOTO_HINTS$1 = ['figure', 'photo', 'image', 'caption'];\nvar PHOTO_HINTS_RE$1 = new RegExp(PHOTO_HINTS$1.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar POSITIVE_SCORE_HINTS$1 = ['article', 'articlecontent', 'instapaper_body', 'blog', 'body', 'content', 'entry-content-asset', 'entry', 'hentry', 'main', 'Normal', 'page', 'pagination', 'permalink', 'post', 'story', 'text', '[-_]copy', // usatoday\n'\\\\Bcopy'];\n\n// The above list, joined into a matching regular expression\nvar POSITIVE_SCORE_RE$1 = new RegExp(POSITIVE_SCORE_HINTS$1.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nvar READABILITY_ASSET$1 = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar NEGATIVE_SCORE_HINTS$1 = ['adbox', 'advert', 'author', 'bio', 'bookmark', 'bottom', 'byline', 'clear', 'com-', 'combx', 'comment', 'comment\\\\B', 'contact', 'copy', 'credit', 'crumb', 'date', 'deck', 'excerpt', 'featured', // tnr.com has a featured_content which throws us off\n'foot', 'footer', 'footnote', 'graf', 'head', 'info', 'infotext', // newscientist.com copyright\n'instapaper_ignore', 'jump', 'linebreak', 'link', 'masthead', 'media', 'meta', 'modal', 'outbrain', // slate.com junk\n'promo', 'pr_', // autoblog - press release\n'related', 'respond', 'roundcontent', // lifehacker restricted content warning\n'scroll', 'secondary', 'share', 'shopping', 'shoutbox', 'side', 'sidebar', 'sponsor', 'stamp', 'sub', 'summary', 'tags', 'tools', 'widget'];\n// The above list, joined into a matching regular expression\nvar NEGATIVE_SCORE_RE$1 = new RegExp(NEGATIVE_SCORE_HINTS$1.join('|'), 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nvar BLOCK_LEVEL_TAGS$1 = ['article', 'aside', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'col', 'colgroup', 'dd', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'li', 'map', 'object', 'ol', 'output', 'p', 'pre', 'progress', 'section', 'table', 'tbody', 'textarea', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nvar BLOCK_LEVEL_TAGS_RE$1 = new RegExp('^(' + BLOCK_LEVEL_TAGS$1.join('|') + ')$', 'i');\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nvar candidatesBlacklist$1 = UNLIKELY_CANDIDATES_BLACKLIST$1.join('|');\nvar candidatesWhitelist$1 = UNLIKELY_CANDIDATES_WHITELIST$1.join('|');\nvar PARAGRAPH_SCORE_TAGS$1 = new RegExp('^(p|li|span|pre)$', 'i');\nvar CHILD_CONTENT_TAGS$1 = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nvar BAD_TAGS$1 = new RegExp('^(address|form)$', 'i');\n\n// Get the score of a node based on its className and id.\nfunction getWeight(node) {\n  var classes = node.attr('class');\n  var id = node.attr('id');\n  var score = 0;\n\n  if (id) {\n    // if id exists, try to score on both positive and negative\n    if (POSITIVE_SCORE_RE$1.test(id)) {\n      score += 25;\n    }\n    if (NEGATIVE_SCORE_RE$1.test(id)) {\n      score -= 25;\n    }\n  }\n\n  if (classes) {\n    if (score === 0) {\n      // if classes exist and id did not contribute to score\n      // try to score on both positive and negative\n      if (POSITIVE_SCORE_RE$1.test(classes)) {\n        score += 25;\n      }\n      if (NEGATIVE_SCORE_RE$1.test(classes)) {\n        score -= 25;\n      }\n    }\n\n    // even if score has been set by id, add score for\n    // possible photo matches\n    // \"try to keep photos if we can\"\n    if (PHOTO_HINTS_RE$1.test(classes)) {\n      score += 10;\n    }\n\n    // add 25 if class matches entry-content-asset,\n    // a class apparently instructed for use in the\n    // Readability publisher guidelines\n    // https://www.readability.com/developers/guidelines\n    if (READABILITY_ASSET$1.test(classes)) {\n      score += 25;\n    }\n  }\n\n  return score;\n}\n\n// returns the score of a node based on\n// the node's score attribute\n// returns null if no score set\nfunction getScore($node) {\n  return parseFloat($node.attr('score')) || null;\n}\n\n// return 1 for every comma in text\nfunction scoreCommas(text) {\n  return (text.match(/,/g) || []).length;\n}\n\nvar idkRe = new RegExp('^(p|pre)$', 'i');\n\nfunction scoreLength(textLength) {\n  var tagName = arguments.length <= 1 || arguments[1] === undefined ? 'p' : arguments[1];\n\n  var chunks = textLength / 50;\n\n  if (chunks > 0) {\n    var lengthBonus = void 0;\n\n    // No idea why p or pre are being tamped down here\n    // but just following the source for now\n    // Not even sure why tagName is included here,\n    // since this is only being called from the context\n    // of scoreParagraph\n    if (idkRe.test(tagName)) {\n      lengthBonus = chunks - 2;\n    } else {\n      lengthBonus = chunks - 1.25;\n    }\n\n    return Math.min(Math.max(lengthBonus, 0), 3);\n  }\n\n  return 0;\n}\n\n// Score a paragraph using various methods. Things like number of\n// commas, etc. Higher is better.\nfunction scoreParagraph(node) {\n  var score = 1;\n  var text = node.text().trim();\n  var textLength = text.length;\n\n  // If this paragraph is less than 25 characters, don't count it.\n  if (textLength < 25) {\n    return 0;\n  }\n\n  // Add points for any commas within this paragraph\n  score += scoreCommas(text);\n\n  // For every 50 characters in this paragraph, add another point. Up\n  // to 3 points.\n  score += scoreLength(textLength);\n\n  // Articles can end with short paragraphs when people are being clever\n  // but they can also end with short paragraphs setting up lists of junk\n  // that we strip. This negative tweaks junk setup paragraphs just below\n  // the cutoff threshold.\n  if (text.slice(-1) === ':') {\n    score -= 1;\n  }\n\n  return score;\n}\n\nfunction setScore($node, $, score) {\n  $node.attr('score', score);\n  return $node;\n}\n\nfunction addScore($node, $, amount) {\n  try {\n    var score = getOrInitScore($node, $) + amount;\n    setScore($node, $, score);\n  } catch (e) {\n    // Ignoring; error occurs in scoreNode\n  }\n\n  return $node;\n}\n\n// Adds 1/4 of a child's score to its parent\nfunction addToParent(node, $, score) {\n  var parent = node.parent();\n  if (parent) {\n    addScore(parent, $, score * 0.25);\n  }\n\n  return node;\n}\n\n// gets and returns the score if it exists\n// if not, initializes a score based on\n// the node's tag type\nfunction getOrInitScore($node, $) {\n  var weightNodes = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n\n  var score = getScore($node);\n\n  if (score) {\n    return score;\n  }\n\n  score = scoreNode($node);\n\n  if (weightNodes) {\n    score += getWeight($node);\n  }\n\n  addToParent($node, $, score);\n\n  return score;\n}\n\n// Score an individual node. Has some smarts for paragraphs, otherwise\n// just scores based on tag.\nfunction scoreNode($node) {\n  var _$node$get = $node.get(0);\n\n  var tagName = _$node$get.tagName;\n\n  // TODO: Consider ordering by most likely.\n  // E.g., if divs are a more common tag on a page,\n  // Could save doing that regex test on every node – AP\n\n  if (PARAGRAPH_SCORE_TAGS$1.test(tagName)) {\n    return scoreParagraph($node);\n  } else if (tagName === 'div') {\n    return 5;\n  } else if (CHILD_CONTENT_TAGS$1.test(tagName)) {\n    return 3;\n  } else if (BAD_TAGS$1.test(tagName)) {\n    return -3;\n  } else if (tagName === 'th') {\n    return -5;\n  }\n\n  return 0;\n}\n\nfunction convertSpans$1($node, $) {\n  if ($node.get(0)) {\n    var _$node$get = $node.get(0);\n\n    var tagName = _$node$get.tagName;\n\n\n    if (tagName === 'span') {\n      // convert spans to divs\n      convertNodeTo($node, $, 'div');\n    }\n  }\n}\n\nfunction addScoreTo($node, $, score) {\n  if ($node) {\n    convertSpans$1($node, $);\n    addScore($node, $, score);\n  }\n}\n\nfunction scorePs($, weightNodes) {\n  $('p, pre').not('[score]').each(function (index, node) {\n    // The raw score for this paragraph, before we add any parent/child\n    // scores.\n    var $node = $(node);\n    $node = setScore($node, $, getOrInitScore($node, $, weightNodes));\n\n    var $parent = $node.parent();\n    var rawScore = scoreNode($node);\n\n    addScoreTo($parent, $, rawScore, weightNodes);\n    if ($parent) {\n      // Add half of the individual content score to the\n      // grandparent\n      addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\n    }\n  });\n\n  return $;\n}\n\n// score content. Parents get the full value of their children's\n// content score, grandparents half\nfunction scoreContent($) {\n  var weightNodes = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n  // First, look for special hNews based selectors and give them a big\n  // boost, if they exist\n  HNEWS_CONTENT_SELECTORS$1.forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var parentSelector = _ref2[0];\n    var childSelector = _ref2[1];\n\n    $(parentSelector + ' ' + childSelector).each(function (index, node) {\n      addScore($(node).parent(parentSelector), $, 80);\n    });\n  });\n\n  // Doubling this again\n  // Previous solution caused a bug\n  // in which parents weren't retaining\n  // scores. This is not ideal, and\n  // should be fixed.\n  scorePs($, weightNodes);\n  scorePs($, weightNodes);\n\n  return $;\n}\n\nvar NORMALIZE_RE = /\\s{2,}/g;\n\nfunction normalizeSpaces(text) {\n  return text.replace(NORMALIZE_RE, ' ').trim();\n}\n\n// Given a node type to search for, and a list of regular expressions,\n// look to see if this extraction can be found in the URL. Expects\n// that each expression in r_list will return group(1) as the proper\n// string to be cleaned.\n// Only used for date_published currently.\nfunction extractFromUrl(url, regexList) {\n  var matchRe = regexList.find(function (re) {\n    return re.test(url);\n  });\n  if (matchRe) {\n    return matchRe.exec(url)[1];\n  }\n\n  return null;\n}\n\n// An expression that looks to try to find the page digit within a URL, if\n// it exists.\n// Matches:\n//  page=1\n//  pg=1\n//  p=1\n//  paging=12\n//  pag=7\n//  pagination/1\n//  paging/88\n//  pa/83\n//  p/11\n//\n// Does not match:\n//  pg=102\n//  page:2\nvar PAGE_IN_HREF_RE = new RegExp('(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})', 'i');\n\nvar HAS_ALPHA_RE = /[a-z]/i;\n\nvar IS_ALPHA_RE = /^[a-z]+$/i;\nvar IS_DIGIT_RE = /^[0-9]+$/i;\n\nfunction pageNumFromUrl(url) {\n  var matches = url.match(PAGE_IN_HREF_RE);\n  if (!matches) return null;\n\n  var pageNum = parseInt(matches[6], 10);\n\n  // Return pageNum < 100, otherwise\n  // return null\n  return pageNum < 100 ? pageNum : null;\n}\n\nfunction removeAnchor(url) {\n  return url.split('#')[0].replace(/\\/$/, '');\n}\n\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\n  var goodSegment = true;\n\n  // If this is purely a number, and it's the first or second\n  // url_segment, it's probably a page number. Remove it.\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\n    goodSegment = true;\n  }\n\n  // If this is the first url_segment and it's just \"index\",\n  // remove it\n  if (index === 0 && segment.toLowerCase() === 'index') {\n    goodSegment = false;\n  }\n\n  // If our first or second url_segment is smaller than 3 characters,\n  // and the first url_segment had no alphas, remove it.\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\n    goodSegment = false;\n  }\n\n  return goodSegment;\n}\n\n// Take a URL, and return the article base of said URL. That is, no\n// pagination data exists in it. Useful for comparing to other links\n// that might have pagination data within them.\nfunction articleBaseUrl(url, parsed) {\n  var parsedUrl = parsed || URL.parse(url);\n  var protocol = parsedUrl.protocol;\n  var host = parsedUrl.host;\n  var path = parsedUrl.path;\n\n\n  var firstSegmentHasLetters = false;\n  var cleanedSegments = path.split('/').reverse().reduce(function (acc, rawSegment, index) {\n    var segment = rawSegment;\n\n    // Split off and save anything that looks like a file type.\n    if (segment.includes('.')) {\n      var _segment$split = segment.split('.');\n\n      var _segment$split2 = _slicedToArray(_segment$split, 2);\n\n      var possibleSegment = _segment$split2[0];\n      var fileExt = _segment$split2[1];\n\n      if (IS_ALPHA_RE.test(fileExt)) {\n        segment = possibleSegment;\n      }\n    }\n\n    // If our first or second segment has anything looking like a page\n    // number, remove it.\n    if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\n      segment = segment.replace(PAGE_IN_HREF_RE, '');\n    }\n\n    // If we're on the first segment, check to see if we have any\n    // characters in it. The first segment is actually the last bit of\n    // the URL, and this will be helpful to determine if we're on a URL\n    // segment that looks like \"/2/\" for example.\n    if (index === 0) {\n      firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\n    }\n\n    // If it's not marked for deletion, push it to cleaned_segments.\n    if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\n      acc.push(segment);\n    }\n\n    return acc;\n  }, []);\n\n  return protocol + '//' + host + cleanedSegments.reverse().join('/');\n}\n\n// Given a string, return True if it appears to have an ending sentence\n// within it, false otherwise.\nvar SENTENCE_END_RE = new RegExp('.( |$)');\nfunction hasSentenceEnd(text) {\n  return SENTENCE_END_RE.test(text);\n}\n\n// Now that we have a top_candidate, look through the siblings of\n// it to see if any of them are decently scored. If they are, they\n// may be split parts of the content (Like two divs, a preamble and\n// a body.) Example:\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\nfunction mergeSiblings($candidate, topScore, $) {\n  if (!$candidate.parent().length) {\n    return $candidate;\n  }\n\n  var siblingScoreThreshold = Math.max(10, topScore * 0.25);\n  var wrappingDiv = $('<div></div>');\n\n  $candidate.parent().children().each(function (index, sibling) {\n    var $sibling = $(sibling);\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE$1.test(sibling.tagName)) {\n      return null;\n    }\n\n    var siblingScore = getScore($sibling);\n    if (siblingScore) {\n      if ($sibling === $candidate) {\n        wrappingDiv.append($sibling);\n      } else {\n        var contentBonus = 0;\n        var density = linkDensity($sibling);\n\n        // If sibling has a very low link density,\n        // give it a small bonus\n        if (density < 0.05) {\n          contentBonus += 20;\n        }\n\n        // If sibling has a high link density,\n        // give it a penalty\n        if (density >= 0.5) {\n          contentBonus -= 20;\n        }\n\n        // If sibling node has the same class as\n        // candidate, give it a bonus\n        if ($sibling.attr('class') === $candidate.attr('class')) {\n          contentBonus += topScore * 0.2;\n        }\n\n        var newScore = siblingScore + contentBonus;\n\n        if (newScore >= siblingScoreThreshold) {\n          return wrappingDiv.append($sibling);\n        } else if (sibling.tagName === 'p') {\n          var siblingContent = $sibling.text();\n          var siblingContentLength = textLength(siblingContent);\n\n          if (siblingContentLength > 80 && density < 0.25) {\n            return wrappingDiv.append($sibling);\n          } else if (siblingContentLength <= 80 && density === 0 && hasSentenceEnd(siblingContent)) {\n            return wrappingDiv.append($sibling);\n          }\n        }\n      }\n    }\n\n    return null;\n  });\n\n  return wrappingDiv;\n}\n\n// After we've calculated scores, loop through all of the possible\n// candidate nodes we found and find the one with the highest score.\nfunction findTopCandidate($) {\n  var $candidate = void 0;\n  var topScore = 0;\n\n  $('[score]').each(function (index, node) {\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE$1.test(node.tagName)) {\n      return;\n    }\n\n    var $node = $(node);\n    var score = getScore($node);\n\n    if (score > topScore) {\n      topScore = score;\n      $candidate = $node;\n    }\n  });\n\n  // If we don't have a candidate, return the body\n  // or whatever the first element is\n  if (!$candidate) {\n    return $('body') || $('*').first();\n  }\n\n  $candidate = mergeSiblings($candidate, topScore, $);\n\n  return $candidate;\n}\n\nfunction removeUnlessContent($node, $, weight) {\n  // Explicitly save entry-content-asset tags, which are\n  // noted as valuable in the Publisher guidelines. For now\n  // this works everywhere. We may want to consider making\n  // this less of a sure-thing later.\n  if ($node.hasClass('entry-content-asset')) {\n    return;\n  }\n\n  var content = normalizeSpaces($node.text());\n\n  if (scoreCommas(content) < 10) {\n    var pCount = $('p', $node).length;\n    var inputCount = $('input', $node).length;\n\n    // Looks like a form, too many inputs.\n    if (inputCount > pCount / 3) {\n      $node.remove();\n      return;\n    }\n\n    var contentLength = content.length;\n    var imgCount = $('img', $node).length;\n\n    // Content is too short, and there are no images, so\n    // this is probably junk content.\n    if (contentLength < 25 && imgCount === 0) {\n      $node.remove();\n      return;\n    }\n\n    var density = linkDensity($node);\n\n    // Too high of link density, is probably a menu or\n    // something similar.\n    // console.log(weight, density, contentLength)\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\n      $node.remove();\n      return;\n    }\n\n    // Too high of a link density, despite the score being\n    // high.\n    if (weight >= 25 && density > 0.5) {\n      // Don't remove the node if it's a list and the\n      // previous sibling starts with a colon though. That\n      // means it's probably content.\n      var tagName = $node.get(0).tagName;\n      var nodeIsList = tagName === 'ol' || tagName === 'ul';\n      if (nodeIsList) {\n        var previousNode = $node.prev();\n        if (previousNode && normalizeSpaces(previousNode.text()).slice(-1) === ':') {\n          return;\n        }\n      }\n\n      $node.remove();\n      return;\n    }\n\n    var scriptCount = $('script', $node).length;\n\n    // Too many script tags, not enough content.\n    if (scriptCount > 0 && contentLength < 150) {\n      $node.remove();\n      return;\n    }\n  }\n}\n\n// Given an article, clean it of some superfluous content specified by\n// tags. Things like forms, ads, etc.\n//\n// Tags is an array of tag name's to search through. (like div, form,\n// etc)\n//\n// Return this same doc.\nfunction cleanTags($article, $) {\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each(function (index, node) {\n    var $node = $(node);\n    var weight = getScore($node);\n    if (!weight) {\n      weight = getOrInitScore($node, $);\n      setScore($node, $, weight);\n    }\n\n    // drop node if its weight is < 0\n    if (weight < 0) {\n      $node.remove();\n    } else {\n      // deteremine if node seems like content\n      removeUnlessContent($node, $, weight);\n    }\n  });\n\n  return $;\n}\n\nfunction cleanHeaders($article, $) {\n  var title = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\n  $(HEADER_TAG_LIST, $article).each(function (index, header) {\n    var $header = $(header);\n    // Remove any headers that appear before all other p tags in the\n    // document. This probably means that it was part of the title, a\n    // subtitle or something else extraneous like a datestamp or byline,\n    // all of which should be handled by other metadata handling.\n    if ($($header, $article).prevAll('p').length === 0) {\n      return $header.remove();\n    }\n\n    // Remove any headers that match the title exactly.\n    if (normalizeSpaces($(header).text()) === title) {\n      return $header.remove();\n    }\n\n    // If this header has a negative weight, it's probably junk.\n    // Get rid of it.\n    if (getWeight($(header)) < 0) {\n      return $header.remove();\n    }\n\n    return $header;\n  });\n\n  return $;\n}\n\n// Rewrite the tag name to div if it's a top level node like body or\n// html to avoid later complications with multiple body tags.\n\nfunction rewriteTopLevel(article, $) {\n  // I'm not using context here because\n  // it's problematic when converting the\n  // top-level/root node - AP\n  $ = convertNodeTo($('html'), $, 'div');\n  $ = convertNodeTo($('body'), $, 'div');\n\n  return $;\n}\n\nfunction absolutize($, rootUrl, attr, $content) {\n  $('[' + attr + ']', $content).each(function (_, node) {\n    var url = node.attribs[attr];\n    var absoluteUrl = URL.resolve(rootUrl, url);\n\n    node.attribs[attr] = absoluteUrl;\n  });\n}\n\nfunction makeLinksAbsolute($content, $, url) {\n  ['href', 'src'].forEach(function (attr) {\n    return absolutize($, url, attr, $content);\n  });\n\n  return $content;\n}\n\nfunction textLength(text) {\n  return text.trim().replace(/\\s+/g, ' ').length;\n}\n\n// Determines what percentage of the text\n// in a node is link text\n// Takes a node, returns a float\nfunction linkDensity($node) {\n  var totalTextLength = textLength($node.text());\n\n  var linkText = $node.find('a').text();\n  var linkLength = textLength(linkText);\n\n  if (totalTextLength > 0) {\n    return linkLength / totalTextLength;\n  } else if (totalTextLength === 0 && linkLength > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n\n// Given a node type to search for, and a list of meta tag names to\n// search for, find a meta tag associated.\n\nfunction extractFromMeta($, metaNames, cachedNames) {\n  var cleanTags = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];\n\n  var foundNames = metaNames.filter(function (name) {\n    return cachedNames.indexOf(name) !== -1;\n  });\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var name = _step.value;\n\n      var type = 'name';\n      var value = 'value';\n\n      var nodes = $('meta[' + type + '=\"' + name + '\"]');\n\n      // Get the unique value of every matching node, in case there\n      // are two meta tags with the same name and value.\n      // Remove empty values.\n      var values = nodes.map(function (index, node) {\n        return $(node).attr(value);\n      }).toArray().filter(function (text) {\n        return text !== '';\n      });\n\n      // If we have more than one value for the same name, we have a\n      // conflict and can't trust any of them. Skip this name. If we have\n      // zero, that means our meta tags had no values. Skip this name\n      // also.\n      if (values.length === 1) {\n        var metaValue = void 0;\n        // Meta values that contain HTML should be stripped, as they\n        // weren't subject to cleaning previously.\n        if (cleanTags) {\n          metaValue = stripTags(values[0], $);\n        } else {\n          metaValue = values[0];\n        }\n\n        return {\n          v: metaValue\n        };\n      }\n    };\n\n    for (var _iterator = _getIterator(foundNames), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ret = _loop();\n\n      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    }\n\n    // If nothing is found, return null\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction isGoodNode($node, maxChildren) {\n  // If it has a number of children, it's more likely a container\n  // element. Skip it.\n  if ($node.children().length > maxChildren) {\n    return false;\n  }\n  // If it looks to be within a comment, skip it.\n  if (withinComment($node)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Given a a list of selectors find content that may\n// be extractable from the document. This is for flat\n// meta-information, like author, title, date published, etc.\nfunction extractFromSelectors($, selectors) {\n  var maxChildren = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n  var textOnly = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(selectors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var selector = _step.value;\n\n      var nodes = $(selector);\n\n      // If we didn't get exactly one of this selector, this may be\n      // a list of articles or comments. Skip it.\n      if (nodes.length === 1) {\n        var $node = $(nodes[0]);\n\n        if (isGoodNode($node, maxChildren)) {\n          var content = void 0;\n          if (textOnly) {\n            content = $node.text();\n          } else {\n            content = $node.html();\n          }\n\n          if (content) {\n            return content;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\n\n// strips all tags from a string of text\nfunction stripTags(text, $) {\n  // Wrapping text in html element prevents errors when text\n  // has no html\n  var cleanText = $('<span>' + text + '</span>').text();\n  return cleanText === '' ? text : cleanText;\n}\n\nfunction withinComment($node) {\n  var parents = $node.parents().toArray();\n  var commentParent = parents.find(function (parent) {\n    var classAndId = parent.attribs.class + ' ' + parent.attribs.id;\n    return classAndId.includes('comment');\n  });\n\n  return commentParent !== undefined;\n}\n\n// Given a node, determine if it's article-like enough to return\n// param: node (a cheerio node)\n// return: boolean\n\nfunction nodeIsSufficient($node) {\n  return $node.text().trim().length >= 100;\n}\n\nfunction isWordpress($) {\n  return $(IS_WP_SELECTOR).length > 0;\n}\n\n// CLEAN AUTHOR CONSTANTS\nvar CLEAN_AUTHOR_RE = /^\\s*(posted |written )?by\\s*:?\\s*(.*)/i;\n//     author = re.sub(r'^\\s*(posted |written )?by\\s*:?\\s*(.*)(?i)',\n\n// CLEAN DEK CONSTANTS\nvar TEXT_LINK_RE = new RegExp('http(s)?://', 'i');\n// CLEAN DATE PUBLISHED CONSTANTS\nvar MS_DATE_STRING = /^\\d{13}$/i;\nvar SEC_DATE_STRING = /^\\d{10}$/i;\nvar CLEAN_DATE_STRING_RE = /^\\s*published\\s*:?\\s*(.*)/i;\nvar TIME_MERIDIAN_SPACE_RE = /(.*\\d)(am|pm)(.*)/i;\nvar TIME_MERIDIAN_DOTS_RE = /\\.m\\./i;\nvar months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\nvar allMonths = months.join('|');\nvar timestamp1 = '[0-9]{1,2}:[0-9]{2,2}( ?[ap].?m.?)?';\nvar timestamp2 = '[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2,4}';\nvar SPLIT_DATE_STRING = new RegExp('(' + timestamp1 + ')|(' + timestamp2 + ')|([0-9]{1,4})|(' + allMonths + ')', 'ig');\n\n// CLEAN TITLE CONSTANTS\n// A regular expression that will match separating characters on a\n// title, that usually denote breadcrumbs or something similar.\nvar TITLE_SPLITTERS_RE = /(: | - | \\| )/g;\n\nvar DOMAIN_ENDINGS_RE = new RegExp('.com$|.net$|.org$|.co.uk$', 'g');\n\n// Take an author string (like 'By David Smith ') and clean it to\n// just the name(s): 'David Smith'.\nfunction cleanAuthor(author) {\n  return author.replace(CLEAN_AUTHOR_RE, '$2').trim();\n}\n\nfunction clean$1(leadImageUrl) {\n  leadImageUrl = leadImageUrl.trim();\n  if (validUrl.isWebUri(leadImageUrl)) {\n    return leadImageUrl;\n  }\n\n  return null;\n}\n\n// Take a dek HTML fragment, and return the cleaned version of it.\n// Return None if the dek wasn't good enough.\nfunction cleanDek(dek, _ref) {\n  var $ = _ref.$;\n\n  // Sanity check that we didn't get too short or long of a dek.\n  if (dek.length > 1000 || dek.length < 5) return null;\n\n  var dekText = stripTags(dek, $);\n\n  // Plain text links shouldn't exist in the dek. If we have some, it's\n  // not a good dek - bail.\n  if (TEXT_LINK_RE.test(dekText)) return null;\n\n  return dekText.trim();\n}\n\n// Is there a compelling reason to use moment here?\n// Mostly only being used for the isValid() method,\n// but could just check for 'Invalid Date' string.\n\nfunction cleanDateString(dateString) {\n  return (dateString.match(SPLIT_DATE_STRING) || []).join(' ').replace(TIME_MERIDIAN_DOTS_RE, 'm').replace(TIME_MERIDIAN_SPACE_RE, '$1 $2 $3').replace(CLEAN_DATE_STRING_RE, '$1').trim();\n}\n\n// Take a date published string, and hopefully return a date out of\n// it. Return none if we fail.\nfunction cleanDatePublished(dateString) {\n  // If string is in milliseconds or seconds, convert to int\n  if (MS_DATE_STRING.test(dateString) || SEC_DATE_STRING.test(dateString)) {\n    dateString = parseInt(dateString, 10);\n  }\n\n  var date = moment(new Date(dateString));\n\n  if (!date.isValid()) {\n    dateString = cleanDateString(dateString);\n    date = moment(new Date(dateString));\n  }\n\n  return date.isValid() ? date.toISOString() : null;\n}\n\n// Clean our article content, returning a new, cleaned node.\n\nfunction extractCleanNode(article, _ref) {\n  var $ = _ref.$;\n  var _ref$cleanConditional = _ref.cleanConditionally;\n  var cleanConditionally = _ref$cleanConditional === undefined ? true : _ref$cleanConditional;\n  var _ref$title = _ref.title;\n  var title = _ref$title === undefined ? '' : _ref$title;\n  var _ref$url = _ref.url;\n  var url = _ref$url === undefined ? '' : _ref$url;\n  var _ref$defaultCleaner = _ref.defaultCleaner;\n  var defaultCleaner = _ref$defaultCleaner === undefined ? true : _ref$defaultCleaner;\n\n  // Rewrite the tag name to div if it's a top level node like body or\n  // html to avoid later complications with multiple body tags.\n  rewriteTopLevel(article, $);\n\n  // Drop small images and spacer images\n  // Only do this is defaultCleaner is set to true;\n  // this can sometimes be too aggressive.\n  if (defaultCleaner) cleanImages(article, $);\n\n  // Drop certain tags like <title>, etc\n  // This is -mostly- for cleanliness, not security.\n  stripJunkTags(article, $);\n\n  // H1 tags are typically the article title, which should be extracted\n  // by the title extractor instead. If there's less than 3 of them (<3),\n  // strip them. Otherwise, turn 'em into H2s.\n  cleanHOnes(article, $);\n\n  // Clean headers\n  cleanHeaders(article, $, title);\n\n  // Make links absolute\n  makeLinksAbsolute(article, $, url);\n\n  // Remove unnecessary attributes\n  cleanAttributes(article);\n\n  // We used to clean UL's and OL's here, but it was leading to\n  // too many in-article lists being removed. Consider a better\n  // way to detect menus particularly and remove them.\n  // Also optionally running, since it can be overly aggressive.\n  if (defaultCleaner) cleanTags(article, $, cleanConditionally);\n\n  // Remove empty paragraph nodes\n  removeEmpty(article, $);\n\n  return article;\n}\n\nfunction cleanTitle(title, _ref) {\n  var url = _ref.url;\n  var $ = _ref.$;\n\n  // If title has |, :, or - in it, see if\n  // we can clean it up.\n  if (TITLE_SPLITTERS_RE.test(title)) {\n    title = resolveSplitTitle(title, url);\n  }\n\n  // Final sanity check that we didn't get a crazy title.\n  // if (title.length > 150 || title.length < 15) {\n  if (title.length > 150) {\n    // If we did, return h1 from the document if it exists\n    var h1 = $('h1');\n    if (h1.length === 1) {\n      title = h1.text();\n    }\n  }\n\n  // strip any html tags in the title text\n  return stripTags(title, $).trim();\n}\n\nfunction extractBreadcrumbTitle(splitTitle, text) {\n  // This must be a very breadcrumbed title, like:\n  // The Best Gadgets on Earth : Bits : Blogs : NYTimes.com\n  // NYTimes - Blogs - Bits - The Best Gadgets on Earth\n  if (splitTitle.length >= 6) {\n    var _ret = function () {\n      // Look to see if we can find a breadcrumb splitter that happens\n      // more than once. If we can, we'll be able to better pull out\n      // the title.\n      var termCounts = splitTitle.reduce(function (acc, titleText) {\n        acc[titleText] = acc[titleText] ? acc[titleText] + 1 : 1;\n        return acc;\n      }, {});\n\n      var _Reflect$ownKeys$redu = _Reflect$ownKeys(termCounts).reduce(function (acc, key) {\n        if (acc[1] < termCounts[key]) {\n          return [key, termCounts[key]];\n        }\n\n        return acc;\n      }, [0, 0]);\n\n      var _Reflect$ownKeys$redu2 = _slicedToArray(_Reflect$ownKeys$redu, 2);\n\n      var maxTerm = _Reflect$ownKeys$redu2[0];\n      var termCount = _Reflect$ownKeys$redu2[1];\n\n      // We found a splitter that was used more than once, so it\n      // is probably the breadcrumber. Split our title on that instead.\n      // Note: max_term should be <= 4 characters, so that \" >> \"\n      // will match, but nothing longer than that.\n\n      if (termCount >= 2 && maxTerm.length <= 4) {\n        splitTitle = text.split(maxTerm);\n      }\n\n      var splitEnds = [splitTitle[0], splitTitle.slice(-1)];\n      var longestEnd = splitEnds.reduce(function (acc, end) {\n        return acc.length > end.length ? acc : end;\n      }, '');\n\n      if (longestEnd.length > 10) {\n        return {\n          v: longestEnd\n        };\n      }\n\n      return {\n        v: text\n      };\n    }();\n\n    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n  }\n\n  return null;\n}\n\nfunction cleanDomainFromTitle(splitTitle, url) {\n  // Search the ends of the title, looking for bits that fuzzy match\n  // the URL too closely. If one is found, discard it and return the\n  // rest.\n  //\n  // Strip out the big TLDs - it just makes the matching a bit more\n  // accurate. Not the end of the world if it doesn't strip right.\n  var _URL$parse = URL.parse(url);\n\n  var host = _URL$parse.host;\n\n  var nakedDomain = host.replace(DOMAIN_ENDINGS_RE, '');\n\n  var startSlug = splitTitle[0].toLowerCase().replace(' ', '');\n  var startSlugRatio = wuzzy.levenshtein(startSlug, nakedDomain);\n\n  if (startSlugRatio > 0.4 && startSlug.length > 5) {\n    return splitTitle.slice(2).join('');\n  }\n\n  var endSlug = splitTitle.slice(-1)[0].toLowerCase().replace(' ', '');\n  var endSlugRatio = wuzzy.levenshtein(endSlug, nakedDomain);\n\n  if (endSlugRatio > 0.4 && endSlug.length >= 5) {\n    return splitTitle.slice(0, -2).join('');\n  }\n\n  return null;\n}\n\n// Given a title with separators in it (colons, dashes, etc),\n// resolve whether any of the segments should be removed.\nfunction resolveSplitTitle(title) {\n  var url = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\n\n  // Splits while preserving splitters, like:\n  // ['The New New York', ' - ', 'The Washington Post']\n  var splitTitle = title.split(TITLE_SPLITTERS_RE);\n  if (splitTitle.length === 1) {\n    return title;\n  }\n\n  var newTitle = extractBreadcrumbTitle(splitTitle, title);\n  if (newTitle) return newTitle;\n\n  newTitle = cleanDomainFromTitle(splitTitle, url);\n  if (newTitle) return newTitle;\n\n  // Fuzzy ratio didn't find anything, so this title is probably legit.\n  // Just return it all.\n  return title;\n}\n\nvar Cleaners = {\n  author: cleanAuthor,\n  lead_image_url: clean$1,\n  dek: cleanDek,\n  date_published: cleanDatePublished,\n  content: extractCleanNode,\n  title: cleanTitle\n};\n\n// Using a variety of scoring techniques, extract the content most\n// likely to be article text.\n//\n// If strip_unlikely_candidates is True, remove any elements that\n// match certain criteria first. (Like, does this element have a\n// classname of \"comment\")\n//\n// If weight_nodes is True, use classNames and IDs to determine the\n// worthiness of nodes.\n//\n// Returns a cheerio object $\nfunction extractBestNode($, opts) {\n  // clone the node so we can get back to our\n  // initial parsed state if needed\n  // TODO Do I need this? – AP\n  // let $root = $.root().clone()\n\n\n  if (opts.stripUnlikelyCandidates) {\n    $ = stripUnlikelyCandidates($);\n  }\n\n  $ = convertToParagraphs($);\n  $ = scoreContent($, opts.weightNodes);\n  var $topCandidate = findTopCandidate($);\n\n  return $topCandidate;\n}\n\nvar GenericContentExtractor = {\n  defaultOpts: {\n    stripUnlikelyCandidates: true,\n    weightNodes: true,\n    cleanConditionally: true\n  },\n\n  // Extract the content for this resource - initially, pass in our\n  // most restrictive opts which will return the highest quality\n  // content. On each failure, retry with slightly more lax opts.\n  //\n  // :param return_type: string. If \"node\", should return the content\n  // as a cheerio node rather than as an HTML string.\n  //\n  // Opts:\n  // stripUnlikelyCandidates: Remove any elements that match\n  // non-article-like criteria first.(Like, does this element\n  //   have a classname of \"comment\")\n  //\n  // weightNodes: Modify an elements score based on whether it has\n  // certain classNames or IDs. Examples: Subtract if a node has\n  // a className of 'comment', Add if a node has an ID of\n  // 'entry-content'.\n  //\n  // cleanConditionally: Clean the node to return of some\n  // superfluous content. Things like forms, ads, etc.\n  extract: function extract(_ref, opts) {\n    var $ = _ref.$;\n    var html = _ref.html;\n    var title = _ref.title;\n    var url = _ref.url;\n\n    opts = _extends({}, this.defaultOpts, opts);\n\n    $ = $ || cheerio.load(html);\n\n    // Cascade through our extraction-specific opts in an ordered fashion,\n    // turning them off as we try to extract content.\n    var node = this.getContentNode($, title, url, opts);\n\n    if (nodeIsSufficient(node)) {\n      return this.cleanAndReturnNode(node, $);\n    }\n\n    // We didn't succeed on first pass, one by one disable our\n    // extraction opts and try again.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(_Reflect$ownKeys(opts).filter(function (k) {\n        return opts[k] === true;\n      })), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var key = _step.value;\n\n        opts[key] = false;\n        $ = cheerio.load(html);\n\n        node = this.getContentNode($, title, url, opts);\n\n        if (nodeIsSufficient(node)) {\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return this.cleanAndReturnNode(node, $);\n  },\n\n\n  // Get node given current options\n  getContentNode: function getContentNode($, title, url, opts) {\n    return extractCleanNode(extractBestNode($, opts), {\n      $: $,\n      cleanConditionally: opts.cleanConditionally,\n      title: title,\n      url: url\n    });\n  },\n\n\n  // Once we got here, either we're at our last-resort node, or\n  // we broke early. Make sure we at least have -something- before we\n  // move forward.\n  cleanAndReturnNode: function cleanAndReturnNode(node, $) {\n    if (!node) {\n      return null;\n    }\n\n    return normalizeSpaces($.html(node));\n\n    // if return_type == \"html\":\n    //     return normalize_spaces(node_to_html(node))\n    // else:\n    //     return node\n  }\n};\n\n// TODO: It would be great if we could merge the meta and selector lists into\n// a list of objects, because we could then rank them better. For example,\n// .hentry .entry-title is far better suited than <meta title>.\n\n// An ordered list of meta tag names that denote likely article titles. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\nvar STRONG_TITLE_META_TAGS = ['tweetmeme-title', 'dc.title', 'rbtitle', 'headline', 'title'];\n\n// og:title is weak because it typically contains context that we don't like,\n// for example the source site's name. Gotta get that brand into facebook!\nvar WEAK_TITLE_META_TAGS = ['og:title'];\n\n// An ordered list of XPath Selectors to find likely article titles. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nvar STRONG_TITLE_SELECTORS = ['.hentry .entry-title', 'h1#articleHeader', 'h1.articleHeader', 'h1.article', '.instapaper_title', '#meebo-title'];\n\nvar WEAK_TITLE_SELECTORS = ['article h1', '#entry-title', '.entry-title', '#entryTitle', '#entrytitle', '.entryTitle', '.entrytitle', '#articleTitle', '.articleTitle', 'post post-title', 'h1.title', 'h2.article', 'h1', 'html head title', 'title'];\n\nvar GenericTitleExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$;\n    var url = _ref.url;\n    var metaCache = _ref.metaCache;\n\n    // First, check to see if we have a matching meta tag that we can make\n    // use of that is strongly associated with the headline.\n    var title = void 0;\n\n    title = extractFromMeta($, STRONG_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle(title, { url: url, $: $ });\n\n    // Second, look through our content selectors for the most likely\n    // article title that is strongly associated with the headline.\n    title = extractFromSelectors($, STRONG_TITLE_SELECTORS);\n    if (title) return cleanTitle(title, { url: url, $: $ });\n\n    // Third, check for weaker meta tags that may match.\n    title = extractFromMeta($, WEAK_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle(title, { url: url, $: $ });\n\n    // Last, look for weaker selector tags that may match.\n    title = extractFromSelectors($, WEAK_TITLE_SELECTORS);\n    if (title) return cleanTitle(title, { url: url, $: $ });\n\n    // If no matches, return an empty string\n    return '';\n  }\n};\n\n// An ordered list of meta tag names that denote likely article authors. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\n//\n// Note: \"author\" is too often the -developer- of the page, so it is not\n// added here.\nvar AUTHOR_META_TAGS = ['byl', 'clmst', 'dc.author', 'dcsext.author', 'dc.creator', 'rbauthors', 'authors'];\n\nvar AUTHOR_MAX_LENGTH = 300;\n\n// An ordered list of XPath Selectors to find likely article authors. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nvar AUTHOR_SELECTORS = ['.entry .entry-author', '.author.vcard .fn', '.author .vcard .fn', '.byline.vcard .fn', '.byline .vcard .fn', '.byline .by .author', '.byline .by', '.byline .author', '.post-author.vcard', '.post-author .vcard', 'a[rel=author]', '#by_author', '.by_author', '#entryAuthor', '.entryAuthor', '.byline a[href*=author]', '#author .authorname', '.author .authorname', '#author', '.author', '.articleauthor', '.ArticleAuthor', '.byline'];\n\n// An ordered list of Selectors to find likely article authors, with\n// regular expression for content.\nvar bylineRe = /^[\\n\\s]*By/i;\nvar BYLINE_SELECTORS_RE = [['#byline', bylineRe], ['.byline', bylineRe]];\n\nvar GenericAuthorExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$;\n    var metaCache = _ref.metaCache;\n\n    var author = void 0;\n\n    // First, check to see if we have a matching\n    // meta tag that we can make use of.\n    author = extractFromMeta($, AUTHOR_META_TAGS, metaCache);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Second, look through our selectors looking for potential authors.\n    author = extractFromSelectors($, AUTHOR_SELECTORS, 2);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Last, use our looser regular-expression based selectors for\n    // potential authors.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(BYLINE_SELECTORS_RE), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _ref4 = _step.value;\n\n        var _ref3 = _slicedToArray(_ref4, 2);\n\n        var selector = _ref3[0];\n        var regex = _ref3[1];\n\n        var node = $(selector);\n        if (node.length === 1) {\n          var text = node.text();\n          if (regex.test(text)) {\n            return cleanAuthor(text);\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\n// An ordered list of meta tag names that denote\n// likely date published dates. All attributes\n// should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nvar DATE_PUBLISHED_META_TAGS = ['article:published_time', 'displaydate', 'dc.date', 'dc.date.issued', 'rbpubdate', 'publish_date', 'pub_date', 'pagedate', 'pubdate', 'revision_date', 'doc_date', 'date_created', 'content_create_date', 'lastmodified', 'created', 'date'];\n\n// An ordered list of XPath Selectors to find\n// likely date published dates. From most explicit\n// to least explicit.\nvar DATE_PUBLISHED_SELECTORS = ['.hentry .dtstamp.published', '.hentry .published', '.hentry .dtstamp.updated', '.hentry .updated', '.single .published', '.meta .published', '.meta .postDate', '.entry-date', '.byline .date', '.postmetadata .date', '.article_datetime', '.date-header', '.story-date', '.dateStamp', '#story .datetime', '.dateline', '.pubdate'];\n\n// An ordered list of compiled regular expressions to find likely date\n// published dates from the URL. These should always have the first\n// reference be a date string that is parseable by dateutil.parser.parse\nvar abbrevMonthsStr = '(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)';\nvar DATE_PUBLISHED_URL_RES = [\n// /2012/01/27/ but not /2012/01/293\nnew RegExp('/(20\\\\d{2}/\\\\d{2}/\\\\d{2})/', 'i'),\n// 20120127 or 20120127T but not 2012012733 or 8201201733\n// /[^0-9](20\\d{2}[01]\\d[0-3]\\d)([^0-9]|$)/i,\n// 2012-01-27\nnew RegExp('(20\\\\d{2}-[01]\\\\d-[0-3]\\\\d)', 'i'),\n// /2012/jan/27/\nnew RegExp('/(20\\\\d{2}/' + abbrevMonthsStr + '/[0-3]\\\\d)/', 'i')];\n\nvar GenericDatePublishedExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$;\n    var url = _ref.url;\n    var metaCache = _ref.metaCache;\n\n    var datePublished = void 0;\n    // First, check to see if we have a matching meta tag\n    // that we can make use of.\n    // Don't try cleaning tags from this string\n    datePublished = extractFromMeta($, DATE_PUBLISHED_META_TAGS, metaCache, false);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Second, look through our selectors looking for potential\n    // date_published's.\n    datePublished = extractFromSelectors($, DATE_PUBLISHED_SELECTORS);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Lastly, look to see if a dately string exists in the URL\n    datePublished = extractFromUrl(url, DATE_PUBLISHED_URL_RES);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    return null;\n  }\n};\n\n// import {\n//   DEK_META_TAGS,\n//   DEK_SELECTORS,\n//   DEK_URL_RES,\n// } from './constants';\n\n// import { cleanDek } from 'cleaners';\n\n// import {\n//   extractFromMeta,\n//   extractFromSelectors,\n// } from 'utils/dom';\n\n// Currently there is only one selector for\n// deks. We should simply return null here\n// until we have a more robust generic option.\n// Below is the original source for this, for reference.\nvar GenericDekExtractor = {\n  // extract({ $, content, metaCache }) {\n  extract: function extract() {\n    return null;\n  }\n};\n\n// An ordered list of meta tag names that denote likely article leading images.\n// All attributes should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nvar LEAD_IMAGE_URL_META_TAGS = ['og:image', 'twitter:image', 'image_src'];\n\nvar LEAD_IMAGE_URL_SELECTORS = ['link[rel=image_src]'];\n\nvar POSITIVE_LEAD_IMAGE_URL_HINTS = ['upload', 'wp-content', 'large', 'photo', 'wp-image'];\nvar POSITIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(POSITIVE_LEAD_IMAGE_URL_HINTS.join('|'), 'i');\n\nvar NEGATIVE_LEAD_IMAGE_URL_HINTS = ['spacer', 'sprite', 'blank', 'throbber', 'gradient', 'tile', 'bg', 'background', 'icon', 'social', 'header', 'hdr', 'advert', 'spinner', 'loader', 'loading', 'default', 'rating', 'share', 'facebook', 'twitter', 'theme', 'promo', 'ads', 'wp-includes'];\nvar NEGATIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(NEGATIVE_LEAD_IMAGE_URL_HINTS.join('|'), 'i');\n\nvar GIF_RE = /\\.gif(\\?.*)?$/i;\nvar JPG_RE = /\\.jpe?g(\\?.*)?$/i;\n\nfunction getSig($node) {\n  return ($node.attr('class') || '') + ' ' + ($node.attr('id') || '');\n}\n\n// Scores image urls based on a variety of heuristics.\nfunction scoreImageUrl(url) {\n  url = url.trim();\n  var score = 0;\n\n  if (POSITIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score += 20;\n  }\n\n  if (NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score -= 20;\n  }\n\n  // TODO: We might want to consider removing this as\n  // gifs are much more common/popular than they once were\n  if (GIF_RE.test(url)) {\n    score -= 10;\n  }\n\n  if (JPG_RE.test(url)) {\n    score += 10;\n  }\n\n  // PNGs are neutral.\n\n  return score;\n}\n\n// Alt attribute usually means non-presentational image.\nfunction scoreAttr($img) {\n  if ($img.attr('alt')) {\n    return 5;\n  }\n\n  return 0;\n}\n\n// Look through our parent and grandparent for figure-like\n// container elements, give a bonus if we find them\nfunction scoreByParents($img) {\n  var score = 0;\n  var $figParent = $img.parents('figure').first();\n\n  if ($figParent.length === 1) {\n    score += 25;\n  }\n\n  var $parent = $img.parent();\n  var $gParent = void 0;\n  if ($parent.length === 1) {\n    $gParent = $parent.parent();\n  }\n\n  [$parent, $gParent].forEach(function ($node) {\n    if (PHOTO_HINTS_RE$1.test(getSig($node))) {\n      score += 15;\n    }\n  });\n\n  return score;\n}\n\n// Look at our immediate sibling and see if it looks like it's a\n// caption. Bonus if so.\nfunction scoreBySibling($img) {\n  var score = 0;\n  var $sibling = $img.next();\n  var sibling = $sibling.get(0);\n\n  if (sibling && sibling.tagName === 'figcaption') {\n    score += 25;\n  }\n\n  if (PHOTO_HINTS_RE$1.test(getSig($sibling))) {\n    score += 15;\n  }\n\n  return score;\n}\n\nfunction scoreByDimensions($img) {\n  var score = 0;\n\n  var width = parseFloat($img.attr('width'));\n  var height = parseFloat($img.attr('height'));\n  var src = $img.attr('src');\n\n  // Penalty for skinny images\n  if (width && width <= 50) {\n    score -= 50;\n  }\n\n  // Penalty for short images\n  if (height && height <= 50) {\n    score -= 50;\n  }\n\n  if (width && height && !src.includes('sprite')) {\n    var area = width * height;\n    if (area < 5000) {\n      // Smaller than 50 x 100\n      score -= 100;\n    } else {\n      score += Math.round(area / 1000);\n    }\n  }\n\n  return score;\n}\n\nfunction scoreByPosition($imgs, index) {\n  return $imgs.length / 2 - index;\n}\n\n// Given a resource, try to find the lead image URL from within\n// it. Like content and next page extraction, uses a scoring system\n// to determine what the most likely image may be. Short circuits\n// on really probable things like og:image meta tags.\n//\n// Potential signals to still take advantage of:\n//   * domain\n//   * weird aspect ratio\nvar GenericLeadImageUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$;\n    var content = _ref.content;\n    var metaCache = _ref.metaCache;\n\n    var cleanUrl = void 0;\n\n    // Check to see if we have a matching meta tag that we can make use of.\n    // Moving this higher because common practice is now to use large\n    // images on things like Open Graph or Twitter cards.\n    // images usually have for things like Open Graph.\n    var imageUrl = extractFromMeta($, LEAD_IMAGE_URL_META_TAGS, metaCache, false);\n\n    if (imageUrl) {\n      cleanUrl = clean$1(imageUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // Next, try to find the \"best\" image via the content.\n    // We'd rather not have to fetch each image and check dimensions,\n    // so try to do some analysis and determine them instead.\n    var imgs = $('img', content).toArray();\n    var imgScores = {};\n\n    imgs.forEach(function (img, index) {\n      var $img = $(img);\n      var src = $img.attr('src');\n\n      if (!src) return;\n\n      var score = scoreImageUrl(src);\n      score += scoreAttr($img);\n      score += scoreByParents($img);\n      score += scoreBySibling($img);\n      score += scoreByDimensions($img);\n      score += scoreByPosition(imgs, index);\n\n      imgScores[src] = score;\n    });\n\n    var _Reflect$ownKeys$redu = _Reflect$ownKeys(imgScores).reduce(function (acc, key) {\n      return imgScores[key] > acc[1] ? [key, imgScores[key]] : acc;\n    }, [null, 0]);\n\n    var _Reflect$ownKeys$redu2 = _slicedToArray(_Reflect$ownKeys$redu, 2);\n\n    var topUrl = _Reflect$ownKeys$redu2[0];\n    var topScore = _Reflect$ownKeys$redu2[1];\n\n\n    if (topScore > 0) {\n      cleanUrl = clean$1(topUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // If nothing else worked, check to see if there are any really\n    // probable nodes in the doc, like <link rel=\"image_src\" />.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(LEAD_IMAGE_URL_SELECTORS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var selector = _step.value;\n\n        var $node = $(selector).first();\n        var src = $node.attr('src');\n        if (src) {\n          cleanUrl = clean$1(src);\n          if (cleanUrl) return cleanUrl;\n        }\n\n        var href = $node.attr('href');\n        if (href) {\n          cleanUrl = clean$1(href);\n          if (cleanUrl) return cleanUrl;\n        }\n\n        var value = $node.attr('value');\n        if (value) {\n          cleanUrl = clean$1(value);\n          if (cleanUrl) return cleanUrl;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\nfunction scoreSimilarity(score, articleUrl, href) {\n  // Do this last and only if we have a real candidate, because it's\n  // potentially expensive computationally. Compare the link to this\n  // URL using difflib to get the % similarity of these URLs. On a\n  // sliding scale, subtract points from this link based on\n  // similarity.\n  if (score > 0) {\n    var similarity = new difflib.SequenceMatcher(null, articleUrl, href).ratio();\n    // Subtract .1 from diff_percent when calculating modifier,\n    // which means that if it's less than 10% different, we give a\n    // bonus instead. Ex:\n    //  3% different = +17.5 points\n    // 10% different = 0 points\n    // 20% different = -25 points\n    var diffPercent = 1.0 - similarity;\n    var diffModifier = -(250 * (diffPercent - 0.2));\n    return score + diffModifier;\n  }\n\n  return 0;\n}\n\nfunction scoreLinkText(linkText, pageNum) {\n  // If the link text can be parsed as a number, give it a minor\n  // bonus, with a slight bias towards lower numbered pages. This is\n  // so that pages that might not have 'next' in their text can still\n  // get scored, and sorted properly by score.\n  var score = 0;\n\n  if (IS_DIGIT_RE.test(linkText.trim())) {\n    var linkTextAsNum = parseInt(linkText, 10);\n    // If it's the first page, we already got it on the first call.\n    // Give it a negative score. Otherwise, up to page 10, give a\n    // small bonus.\n    if (linkTextAsNum < 2) {\n      score = -30;\n    } else {\n      score = Math.max(0, 10 - linkTextAsNum);\n    }\n\n    // If it appears that the current page number is greater than\n    // this links page number, it's a very bad sign. Give it a big\n    // penalty.\n    if (pageNum && pageNum >= linkTextAsNum) {\n      score -= 50;\n    }\n  }\n\n  return score;\n}\n\nfunction scorePageInLink(pageNum, isWp) {\n  // page in the link = bonus. Intentionally ignore wordpress because\n  // their ?p=123 link style gets caught by this even though it means\n  // separate documents entirely.\n  if (pageNum && !isWp) {\n    return 50;\n  }\n\n  return 0;\n}\n\nvar DIGIT_RE$2 = /\\d/;\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nvar EXTRANEOUS_LINK_HINTS$1 = ['print', 'archive', 'comment', 'discuss', 'e-mail', 'email', 'share', 'reply', 'all', 'login', 'sign', 'single', 'adx', 'entry-unrelated'];\nvar EXTRANEOUS_LINK_HINTS_RE$1 = new RegExp(EXTRANEOUS_LINK_HINTS$1.join('|'), 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\nvar NEXT_LINK_TEXT_RE$1 = new RegExp('(next|weiter|continue|>([^|]|$)|»([^|]|$))', 'i');\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nvar CAP_LINK_TEXT_RE$1 = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nvar PREV_LINK_TEXT_RE$1 = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\nfunction scoreExtraneousLinks(href) {\n  // If the URL itself contains extraneous values, give a penalty.\n  if (EXTRANEOUS_LINK_HINTS_RE$1.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n\nfunction makeSig$1($link) {\n  return ($link.attr('class') || '') + ' ' + ($link.attr('id') || '');\n}\n\nfunction scoreByParents$1($link) {\n  // If a parent node contains paging-like classname or id, give a\n  // bonus. Additionally, if a parent_node contains bad content\n  // (like 'sponsor'), give a penalty.\n  var $parent = $link.parent();\n  var positiveMatch = false;\n  var negativeMatch = false;\n  var score = 0;\n\n  _Array$from(range(0, 4)).forEach(function () {\n    if ($parent.length === 0) {\n      return;\n    }\n\n    var parentData = makeSig$1($parent, ' ');\n\n    // If we have 'page' or 'paging' in our data, that's a good\n    // sign. Add a bonus.\n    if (!positiveMatch && PAGE_RE.test(parentData)) {\n      positiveMatch = true;\n      score += 25;\n    }\n\n    // If we have 'comment' or something in our data, and\n    // we don't have something like 'content' as well, that's\n    // a bad sign. Give a penalty.\n    if (!negativeMatch && NEGATIVE_SCORE_RE.test(parentData) && EXTRANEOUS_LINK_HINTS_RE$1.test(parentData)) {\n      if (!POSITIVE_SCORE_RE.test(parentData)) {\n        negativeMatch = true;\n        score -= 25;\n      }\n    }\n\n    $parent = $parent.parent();\n  });\n\n  return score;\n}\n\nfunction scorePrevLink(linkData) {\n  // If the link has something like \"previous\", its definitely\n  // an old link, skip it.\n  if (PREV_LINK_TEXT_RE$1.test(linkData)) {\n    return -200;\n  }\n\n  return 0;\n}\n\nfunction shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls) {\n  // skip if we've already fetched this url\n  if (previousUrls.find(function (url) {\n    return href === url;\n  }) !== undefined) {\n    return false;\n  }\n\n  // If we've already parsed this URL, or the URL matches the base\n  // URL, or is empty, skip it.\n  if (!href || href === articleUrl || href === baseUrl) {\n    return false;\n  }\n\n  var hostname = parsedUrl.hostname;\n\n  var _URL$parse = URL.parse(href);\n\n  var linkHost = _URL$parse.hostname;\n\n  // Domain mismatch.\n\n  if (linkHost !== hostname) {\n    return false;\n  }\n\n  // If href doesn't contain a digit after removing the base URL,\n  // it's certainly not the next page.\n  var fragment = href.replace(baseUrl, '');\n  if (!DIGIT_RE$2.test(fragment)) {\n    return false;\n  }\n\n  // This link has extraneous content (like \"comment\") in its link\n  // text, so we skip it.\n  if (EXTRANEOUS_LINK_HINTS_RE$1.test(linkText)) {\n    return false;\n  }\n\n  // Next page link text is never long, skip if it is too long.\n  if (linkText.length > 25) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction scoreBaseUrl(href, baseRegex) {\n  // If the baseUrl isn't part of this URL, penalize this\n  // link. It could still be the link, but the odds are lower.\n  // Example:\n  // http://www.actionscript.org/resources/articles/745/1/JavaScript-and-VBScript-Injection-in-ActionScript-3/Page1.html\n  if (!baseRegex.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n\nfunction scoreNextLinkText(linkData) {\n  // Things like \"next\", \">>\", etc.\n  if (NEXT_LINK_TEXT_RE$1.test(linkData)) {\n    return 50;\n  }\n\n  return 0;\n}\n\nfunction scoreCapLinks(linkData) {\n  // Cap links are links like \"last\", etc.\n  if (CAP_LINK_TEXT_RE$1.test(linkData)) {\n    // If we found a link like \"last\", but we've already seen that\n    // this link is also \"next\", it's fine. If it's not been\n    // previously marked as \"next\", then it's probably bad.\n    // Penalize.\n    if (NEXT_LINK_TEXT_RE$1.test(linkData)) {\n      return -65;\n    }\n  }\n\n  return 0;\n}\n\nfunction makeBaseRegex(baseUrl) {\n  return new RegExp('^' + baseUrl, 'i');\n}\n\nfunction makeSig($link, linkText) {\n  return (linkText || $link.text()) + ' ' + ($link.attr('class') || '') + ' ' + ($link.attr('id') || '');\n}\n\nfunction scoreLinks(_ref) {\n  var links = _ref.links;\n  var articleUrl = _ref.articleUrl;\n  var baseUrl = _ref.baseUrl;\n  var parsedUrl = _ref.parsedUrl;\n  var $ = _ref.$;\n  var _ref$previousUrls = _ref.previousUrls;\n  var previousUrls = _ref$previousUrls === undefined ? [] : _ref$previousUrls;\n\n  parsedUrl = parsedUrl || URL.parse(articleUrl);\n  var baseRegex = makeBaseRegex(baseUrl);\n  var isWp = isWordpress($);\n\n  // Loop through all links, looking for hints that they may be next-page\n  // links. Things like having \"page\" in their textContent, className or\n  // id, or being a child of a node with a page-y className or id.\n  //\n  // After we do that, assign each page a score, and pick the one that\n  // looks most like the next page link, as long as its score is strong\n  // enough to have decent confidence.\n  var scoredPages = links.reduce(function (possiblePages, link) {\n    // Remove any anchor data since we don't do a good job\n    // standardizing URLs (it's hard), we're going to do\n    // some checking with and without a trailing slash\n    var href = removeAnchor(link.attribs.href);\n    var $link = $(link);\n    var linkText = $link.text();\n\n    if (!shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls)) {\n      return possiblePages;\n    }\n\n    // ## PASSED THE FIRST-PASS TESTS. Start scoring. ##\n    if (!possiblePages[href]) {\n      possiblePages[href] = {\n        score: 0,\n        linkText: linkText,\n        href: href\n      };\n    } else {\n      possiblePages[href].linkText = possiblePages[href].linkText + '|' + linkText;\n    }\n\n    var possiblePage = possiblePages[href];\n    var linkData = makeSig($link, linkText);\n    var pageNum = pageNumFromUrl(href);\n\n    var score = scoreBaseUrl(href, baseRegex);\n    score += scoreNextLinkText(linkData);\n    score += scoreCapLinks(linkData);\n    score += scorePrevLink(linkData);\n    score += scoreByParents$1($link);\n    score += scoreExtraneousLinks(href);\n    score += scorePageInLink(pageNum, isWp);\n    score += scoreLinkText(linkText, pageNum);\n    score += scoreSimilarity(score, articleUrl, href);\n\n    possiblePage.score = score;\n\n    return possiblePages;\n  }, {});\n\n  return _Reflect$ownKeys(scoredPages).length === 0 ? null : scoredPages;\n}\n\n// Looks for and returns next page url\n// for multi-page articles\nvar GenericNextPageUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$;\n    var url = _ref.url;\n    var parsedUrl = _ref.parsedUrl;\n    var _ref$previousUrls = _ref.previousUrls;\n    var previousUrls = _ref$previousUrls === undefined ? [] : _ref$previousUrls;\n\n    parsedUrl = parsedUrl || URL.parse(url);\n\n    var articleUrl = removeAnchor(url);\n    var baseUrl = articleBaseUrl(url, parsedUrl);\n\n    var links = $('a[href]').toArray();\n\n    var scoredLinks = scoreLinks({\n      links: links,\n      articleUrl: articleUrl,\n      baseUrl: baseUrl,\n      parsedUrl: parsedUrl,\n      $: $,\n      previousUrls: previousUrls\n    });\n\n    // If no links were scored, return null\n    if (!scoredLinks) return null;\n\n    // now that we've scored all possible pages,\n    // find the biggest one.\n    var topPage = _Reflect$ownKeys(scoredLinks).reduce(function (acc, link) {\n      var scoredLink = scoredLinks[link];\n      return scoredLink.score > acc.score ? scoredLink : acc;\n    }, { score: -100 });\n\n    // If the score is less than 50, we're not confident enough to use it,\n    // so we fail.\n    if (topPage.score >= 50) {\n      return topPage.href;\n    }\n\n    return null;\n  }\n};\n\nvar CANONICAL_META_SELECTORS = ['og:url'];\n\nfunction parseDomain(url) {\n  var parsedUrl = URL.parse(url);\n  var hostname = parsedUrl.hostname;\n\n  return hostname;\n}\n\nfunction result(url) {\n  return {\n    url: url,\n    domain: parseDomain(url)\n  };\n}\n\nvar GenericUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$;\n    var url = _ref.url;\n    var metaCache = _ref.metaCache;\n\n    var $canonical = $('link[rel=canonical]');\n    if ($canonical.length !== 0) {\n      var href = $canonical.attr('href');\n      if (href) {\n        return result(href);\n      }\n    }\n\n    var metaUrl = extractFromMeta($, CANONICAL_META_SELECTORS, metaCache);\n    if (metaUrl) {\n      return result(metaUrl);\n    }\n\n    return result(url);\n  }\n};\n\nvar EXCERPT_META_SELECTORS = ['og:description', 'twitter:description'];\n\nfunction clean$2(content, $) {\n  var maxLength = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];\n\n  content = content.replace(/[\\s\\n]+/g, ' ').trim();\n  return ellipsize(content, maxLength, { ellipse: '&hellip;' });\n}\n\nvar GenericExcerptExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$;\n    var content = _ref.content;\n    var metaCache = _ref.metaCache;\n\n    var excerpt = extractFromMeta($, EXCERPT_META_SELECTORS, metaCache);\n    if (excerpt) {\n      return clean$2(stripTags(excerpt, $));\n    }\n    // Fall back to excerpting from the extracted content\n    var maxLength = 200;\n    var shortContent = content.slice(0, maxLength * 5);\n    return clean$2($(shortContent).text(), $, maxLength);\n  }\n};\n\nvar GenericWordCountExtractor = {\n  extract: function extract(_ref) {\n    var content = _ref.content;\n\n    var $ = cheerio.load(content);\n\n    var text = normalizeSpaces($('div').first().text());\n    return text.split(/\\s/).length;\n  }\n};\n\nvar GenericExtractor = {\n  // This extractor is the default for all domains\n  domain: '*',\n  title: GenericTitleExtractor.extract,\n  date_published: GenericDatePublishedExtractor.extract,\n  author: GenericAuthorExtractor.extract,\n  content: GenericContentExtractor.extract.bind(GenericContentExtractor),\n  lead_image_url: GenericLeadImageUrlExtractor.extract,\n  dek: GenericDekExtractor.extract,\n  next_page_url: GenericNextPageUrlExtractor.extract,\n  url_and_domain: GenericUrlExtractor.extract,\n  excerpt: GenericExcerptExtractor.extract,\n  word_count: GenericWordCountExtractor.extract,\n  direction: function direction(_ref) {\n    var title = _ref.title;\n    return stringDirection.getDirection(title);\n  },\n\n  extract: function extract(options) {\n    var html = options.html;\n\n\n    if (html) {\n      var $ = cheerio.load(html);\n      options.$ = $;\n    }\n\n    var title = this.title(options);\n    var date_published = this.date_published(options);\n    var author = this.author(options);\n    var content = this.content(_extends({}, options, { title: title }));\n    var lead_image_url = this.lead_image_url(_extends({}, options, { content: content }));\n    var dek = this.dek(_extends({}, options, { content: content }));\n    var next_page_url = this.next_page_url(options);\n    var excerpt = this.excerpt(_extends({}, options, { content: content }));\n    var word_count = this.word_count(_extends({}, options, { content: content }));\n    var direction = this.direction({ title: title });\n\n    var _url_and_domain = this.url_and_domain(options);\n\n    var url = _url_and_domain.url;\n    var domain = _url_and_domain.domain;\n\n\n    return {\n      title: title,\n      author: author,\n      date_published: date_published || null,\n      dek: dek,\n      lead_image_url: lead_image_url,\n      content: content,\n      next_page_url: next_page_url,\n      url: url,\n      domain: domain,\n      excerpt: excerpt,\n      word_count: word_count,\n      direction: direction\n    };\n  }\n};\n\nfunction getExtractor(url, parsedUrl) {\n  parsedUrl = parsedUrl || URL.parse(url);\n  var _parsedUrl = parsedUrl;\n  var hostname = _parsedUrl.hostname;\n\n  var baseDomain = hostname.split('.').slice(-2).join('.');\n\n  return Extractors[hostname] || Extractors[baseDomain] || GenericExtractor;\n}\n\n// Remove elements by an array of selectors\nfunction cleanBySelectors($content, $, _ref) {\n  var clean = _ref.clean;\n\n  if (!clean) return $content;\n\n  $(clean.join(','), $content).remove();\n\n  return $content;\n}\n\n// Transform matching elements\nfunction transformElements($content, $, _ref2) {\n  var transforms = _ref2.transforms;\n\n  if (!transforms) return $content;\n\n  _Reflect$ownKeys(transforms).forEach(function (key) {\n    var $matches = $(key, $content);\n    var value = transforms[key];\n\n    // If value is a string, convert directly\n    if (typeof value === 'string') {\n      $matches.each(function (index, node) {\n        convertNodeTo($(node), $, transforms[key]);\n      });\n    } else if (typeof value === 'function') {\n      // If value is function, apply function to node\n      $matches.each(function (index, node) {\n        var result = value($(node), $);\n        // If function returns a string, convert node to that value\n        if (typeof result === 'string') {\n          convertNodeTo($(node), $, result);\n        }\n      });\n    }\n  });\n\n  return $content;\n}\n\nfunction findMatchingSelector($, selectors) {\n  return selectors.find(function (selector) {\n    if (Array.isArray(selector)) {\n      var _selector = _slicedToArray(selector, 2);\n\n      var s = _selector[0];\n      var attr = _selector[1];\n\n      return $(s).length === 1 && $(s).attr(attr) && $(s).attr(attr).trim() !== '';\n    }\n\n    return $(selector).length === 1 && $(selector).text().trim() !== '';\n  });\n}\n\nfunction select(opts) {\n  var $ = opts.$;\n  var type = opts.type;\n  var extractionOpts = opts.extractionOpts;\n  var _opts$extractHtml = opts.extractHtml;\n  var extractHtml = _opts$extractHtml === undefined ? false : _opts$extractHtml;\n  // Skip if there's not extraction for this type\n\n  if (!extractionOpts) return null;\n\n  // If a string is hardcoded for a type (e.g., Wikipedia\n  // contributors), return the string\n  if (typeof extractionOpts === 'string') return extractionOpts;\n\n  var selectors = extractionOpts.selectors;\n  var _extractionOpts$defau = extractionOpts.defaultCleaner;\n  var defaultCleaner = _extractionOpts$defau === undefined ? true : _extractionOpts$defau;\n\n\n  var matchingSelector = findMatchingSelector($, selectors);\n\n  if (!matchingSelector) return null;\n\n  // Declaring result; will contain either\n  // text or html, which will be cleaned\n  // by the appropriate cleaner type\n\n  // If the selector type requests html as its return type\n  // transform and clean the element with provided selectors\n  if (extractHtml) {\n    var $content = $(matchingSelector);\n\n    // Wrap in div so transformation can take place on root element\n    $content.wrap($('<div></div>'));\n    $content = $content.parent();\n\n    $content = transformElements($content, $, extractionOpts);\n    $content = cleanBySelectors($content, $, extractionOpts);\n\n    $content = Cleaners[type]($content, _extends({}, opts, { defaultCleaner: defaultCleaner }));\n\n    return $.html($content);\n  }\n\n  var result = void 0;\n\n  // if selector is an array (e.g., ['img', 'src']),\n  // extract the attr\n  if (Array.isArray(matchingSelector)) {\n    var _matchingSelector = _slicedToArray(matchingSelector, 2);\n\n    var selector = _matchingSelector[0];\n    var attr = _matchingSelector[1];\n\n    result = $(selector).attr(attr).trim();\n  } else {\n    result = $(matchingSelector).text().trim();\n  }\n\n  // Allow custom extractor to skip default cleaner\n  // for this type; defaults to true\n  if (defaultCleaner) {\n    return Cleaners[type](result, opts);\n  }\n\n  return result;\n}\n\nfunction extractResult(opts) {\n  var type = opts.type;\n  var extractor = opts.extractor;\n  var _opts$fallback = opts.fallback;\n  var fallback = _opts$fallback === undefined ? true : _opts$fallback;\n\n\n  var result = select(_extends({}, opts, { extractionOpts: extractor[type] }));\n\n  // If custom parser succeeds, return the result\n  if (result) {\n    return result;\n  }\n\n  // If nothing matches the selector, and fallback is enabled,\n  // run the Generic extraction\n  if (fallback) return GenericExtractor[type](opts);\n\n  return null;\n}\n\nvar RootExtractor = {\n  extract: function extract() {\n    var extractor = arguments.length <= 0 || arguments[0] === undefined ? GenericExtractor : arguments[0];\n    var opts = arguments[1];\n    var _opts = opts;\n    var contentOnly = _opts.contentOnly;\n    var extractedTitle = _opts.extractedTitle;\n    // This is the generic extractor. Run its extract method\n\n    if (extractor.domain === '*') return extractor.extract(opts);\n\n    opts = _extends({}, opts, {\n      extractor: extractor\n    });\n\n    if (contentOnly) {\n      var _content = extractResult(_extends({}, opts, { type: 'content', extractHtml: true, title: extractedTitle\n      }));\n      return {\n        content: _content\n      };\n    }\n    var title = extractResult(_extends({}, opts, { type: 'title' }));\n    var date_published = extractResult(_extends({}, opts, { type: 'date_published' }));\n    var author = extractResult(_extends({}, opts, { type: 'author' }));\n    var next_page_url = extractResult(_extends({}, opts, { type: 'next_page_url' }));\n    var content = extractResult(_extends({}, opts, { type: 'content', extractHtml: true, title: title\n    }));\n    var lead_image_url = extractResult(_extends({}, opts, { type: 'lead_image_url', content: content }));\n    var dek = extractResult(_extends({}, opts, { type: 'dek', content: content }));\n    var excerpt = extractResult(_extends({}, opts, { type: 'excerpt', content: content }));\n    var word_count = extractResult(_extends({}, opts, { type: 'word_count', content: content }));\n    var direction = extractResult(_extends({}, opts, { type: 'direction', title: title }));\n\n    var _ref3 = extractResult(_extends({}, opts, { type: 'url_and_domain' })) || { url: null, domain: null };\n\n    var url = _ref3.url;\n    var domain = _ref3.domain;\n\n\n    return {\n      title: title,\n      content: content,\n      author: author,\n      date_published: date_published,\n      lead_image_url: lead_image_url,\n      dek: dek,\n      next_page_url: next_page_url,\n      url: url,\n      domain: domain,\n      excerpt: excerpt,\n      word_count: word_count,\n      direction: direction\n    };\n  }\n};\n\nvar collectAllPages = (function () {\n  var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref2) {\n    var next_page_url = _ref2.next_page_url;\n    var html = _ref2.html;\n    var $ = _ref2.$;\n    var metaCache = _ref2.metaCache;\n    var result = _ref2.result;\n    var Extractor = _ref2.Extractor;\n    var title = _ref2.title;\n    var url = _ref2.url;\n    var pages, previousUrls, extractorOpts, nextPageResult, word_count;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // At this point, we've fetched just the first page\n            pages = 1;\n            previousUrls = [removeAnchor(url)];\n\n            // If we've gone over 26 pages, something has\n            // likely gone wrong.\n\n          case 2:\n            if (!(next_page_url && pages < 26)) {\n              _context.next = 15;\n              break;\n            }\n\n            pages += 1;\n            _context.next = 6;\n            return Resource.create(next_page_url);\n\n          case 6:\n            $ = _context.sent;\n\n            html = $.html();\n\n            extractorOpts = {\n              url: next_page_url,\n              html: html,\n              $: $,\n              metaCache: metaCache,\n              contentOnly: true,\n              extractedTitle: title,\n              previousUrls: previousUrls\n            };\n            nextPageResult = RootExtractor.extract(Extractor, extractorOpts);\n\n\n            previousUrls.push(next_page_url);\n            result = _extends({}, result, {\n              content: '\\n        ' + result.content + '\\n        <hr>\\n        <h4>Page ' + pages + '</h4>\\n        ' + nextPageResult.content + '\\n        '\n            });\n\n            next_page_url = nextPageResult.next_page_url;\n            _context.next = 2;\n            break;\n\n          case 15:\n            word_count = GenericExtractor.word_count({ content: '<div>' + result.content + '</div>' });\n            return _context.abrupt('return', _extends({}, result, {\n              total_pages: pages,\n              pages_rendered: pages,\n              word_count: word_count\n            }));\n\n          case 17:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  function collectAllPages(_x) {\n    return _ref.apply(this, arguments);\n  }\n\n  return collectAllPages;\n})();\n\nvar Mercury = {\n  parse: function parse(url, html) {\n    var _this = this;\n\n    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n      var _opts$fetchAllPages, fetchAllPages, _opts$fallback, fallback, parsedUrl, Extractor, $, metaCache, result, _result, title, next_page_url;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _opts$fetchAllPages = opts.fetchAllPages;\n              fetchAllPages = _opts$fetchAllPages === undefined ? true : _opts$fetchAllPages;\n              _opts$fallback = opts.fallback;\n              fallback = _opts$fallback === undefined ? true : _opts$fallback;\n              parsedUrl = URL.parse(url);\n\n              if (validateUrl(parsedUrl)) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt('return', Errors.badUrl);\n\n            case 7:\n              Extractor = getExtractor(url, parsedUrl);\n              // console.log(`Using extractor for ${Extractor.domain}`);\n\n              _context.next = 10;\n              return Resource.create(url, html, parsedUrl);\n\n            case 10:\n              $ = _context.sent;\n\n              if (!$.error) {\n                _context.next = 13;\n                break;\n              }\n\n              return _context.abrupt('return', $);\n\n            case 13:\n\n              html = $.html();\n\n              // Cached value of every meta name in our document.\n              // Used when extracting title/author/date_published/dek\n              metaCache = $('meta').map(function (_, node) {\n                return $(node).attr('name');\n              }).toArray();\n              result = RootExtractor.extract(Extractor, { url: url, html: html, $: $, metaCache: metaCache, parsedUrl: parsedUrl, fallback: fallback });\n              _result = result;\n              title = _result.title;\n              next_page_url = _result.next_page_url;\n\n              // Fetch more pages if next_page_url found\n\n              if (!(fetchAllPages && next_page_url)) {\n                _context.next = 25;\n                break;\n              }\n\n              _context.next = 22;\n              return collectAllPages({\n                Extractor: Extractor,\n                next_page_url: next_page_url,\n                html: html,\n                $: $,\n                metaCache: metaCache,\n                result: result,\n                title: title,\n                url: url\n              });\n\n            case 22:\n              result = _context.sent;\n              _context.next = 26;\n              break;\n\n            case 25:\n              result = _extends({}, result, {\n                total_pages: 1,\n                rendered_pages: 1\n              });\n\n            case 26:\n              return _context.abrupt('return', result);\n\n            case 27:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this);\n    }))();\n  },\n\n\n  // A convenience method for getting a resource\n  // to work with, e.g., for custom extractor generator\n  fetchResource: function fetchResource(url) {\n    var _this2 = this;\n\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Resource.create(url);\n\n            case 2:\n              return _context2.abrupt('return', _context2.sent);\n\n            case 3:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, _this2);\n    }))();\n  }\n};\n\nmodule.exports = Mercury;\n//# sourceMappingURL=mercury.js.map\n","// Spacer images to be removed\nexport const SPACER_RE = new RegExp('trans|transparent|spacer|blank', 'i');\n\n// A list of tags to strip from the output if we encounter them.\nexport const STRIP_OUTPUT_TAGS = [\n  'title',\n  'script',\n  'noscript',\n  'link',\n  'style',\n  'hr',\n  'embed',\n  'iframe',\n  'object',\n];\n\n// cleanAttributes\nexport const REMOVE_ATTRS = ['style', 'align'];\nexport const REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(selector => `[${selector}]`);\nexport const REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nexport const WHITELIST_ATTRS = ['src', 'srcset', 'href', 'class', 'id', 'alt', 'score'];\nexport const WHITELIST_ATTRS_RE = new RegExp(`^(${WHITELIST_ATTRS.join('|')})$`, 'i');\n\n// removeEmpty\nexport const REMOVE_EMPTY_TAGS = ['p'];\nexport const REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(tag => `${tag}:empty`).join(',');\n\n// cleanTags\nexport const CLEAN_CONDITIONALLY_TAGS = ['ul', 'ol', 'table', 'div', 'button', 'form'].join(',');\n\n// cleanHeaders\nconst HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nexport const HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  // 'form', // This is too generic, has too many false positives\n  'header',\n  'hidden',\n  'loader',\n  'login',                     // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'outbrain',\n  'pager',\n  'pagination',\n  'predicta',                  // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'taboola',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE =\n  new RegExp(`^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`, 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = [\n  'figure',\n  'photo',\n  'image',\n  'caption',\n];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nexport const IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(EXTRANEOUS_LINK_HINTS.join('|'), 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\nexport const NEXT_LINK_TEXT_RE = /(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))/i;\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(`^(${BLOCK_LEVEL_TAGS.join('|')})$`, 'i');\n\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(`!(${candidatesWhitelist})|(${candidatesBlacklist})`, 'i');\n\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import {\n  STRIP_OUTPUT_TAGS,\n} from './constants';\n\nexport default function stripJunkTags(article, $, tags = []) {\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  $(tags.join(','), article).remove();\n\n  return $;\n}\n","// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  'form',\n  'header',\n  'hidden',\n  'loader',\n  'login',                     // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'pager',\n  'pagination',\n  'predicta',                  // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE =\n  new RegExp(`^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`, 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = [\n  'figure',\n  'photo',\n  'image',\n  'caption',\n];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(`^(${BLOCK_LEVEL_TAGS.join('|')})$`, 'i');\n\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(`!(${candidatesWhitelist})|(${candidatesBlacklist})`, 'i');\n\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import URL from 'url';\n\nfunction absolutize($, rootUrl, attr, $content) {\n  $(`[${attr}]`, $content).each((_, node) => {\n    const url = node.attribs[attr];\n    const absoluteUrl = URL.resolve(rootUrl, url);\n\n    node.attribs[attr] = absoluteUrl;\n  });\n}\n\nexport default function makeLinksAbsolute($content, $, url) {\n  ['href', 'src'].forEach(attr => absolutize($, url, attr, $content));\n\n  return $content;\n}\n","export default function insertValues(strings, ...values) {\n  if (values.length) {\n    return strings.reduce((result, part, idx) => {\n      let value = values[idx];\n\n      if (value && typeof value.toString === 'function') {\n        value = value.toString();\n      } else {\n        value = '';\n      }\n\n      return result + part + value;\n    }, '');\n  }\n\n  return strings.join('');\n}\n","import insertValues from './insert-values'\n\nconst bodyPattern = /^\\n([\\s\\S]+)\\s{2}$/gm;\nconst trailingWhitespace = /\\s+$/;\n\nexport default function template(strings, ...values) {\n  const compiled = insertValues(strings, ...values);\n  let [body] = compiled.match(bodyPattern) || [];\n  let indentLevel = /^\\s{0,4}(.+)$/g;\n\n  if (!body) {\n    body = compiled;\n    indentLevel = /^\\s{0,2}(.+)$/g;\n  }\n\n  return body.split('\\n')\n    .slice(1)\n    .map((line) => {\n      line = line.replace(indentLevel, '$1');\n\n      if (trailingWhitespace.test(line)) {\n        line = line.replace(trailingWhitespace, '');\n      }\n\n      return line;\n    })\n    .join('\\n');\n}\n","import template from './index';\n\nexport default function (hostname) {\n  return template`\n    // Rename CustomExtractor\n    // to fit your publication\n    // (e.g., NYTimesExtractor)\n    export const CustomExtractor = {\n      domain: '${hostname}',\n      title: {\n        selectors: [\n          // enter title selectors\n        ],\n      },\n\n      author: {\n        selectors: [\n          // enter author selectors\n        ],\n      },\n\n      content: {\n        selectors: [\n          // enter content selectors\n        ],\n\n        // Is there anything in the content you selected that needs transformed\n        // before it's consumable content? E.g., unusual lazy loaded images\n        transforms: {\n        },\n\n        // Is there anything that is in the result that shouldn't be?\n        // The clean selectors will remove anything that matches from\n        // the result\n        clean: [\n\n        ]\n      },\n\n      date_published: null,\n\n      lead_image_url: null,\n\n      dek: null,\n\n      next_page_url: null,\n\n      excerpt: null,\n    }\n  `;\n}\n","import 'babel-polyfill';\n\nimport template from './index';\n\nconst IGNORE = [\n  'url',\n  'domain',\n  'content',\n  'word_count',\n  'next_page_url',\n  'excerpt',\n  'direction',\n  'total_pages',\n  'rendered_pages',\n]\n\nfunction testFor(key, value, dir, file, url) {\n  if (IGNORE.find(k => k === key)) return ''\n\n  return template`\n  it('returns the ${key}', async () => {\n            // To pass this test, fill out the ${key} selector\n            // in ${dir}/index.js.\n            const html =\n              fs.readFileSync('${file}');\n            const articleUrl =\n              '${url}';\n\n            const { ${key} } =\n              await Mercury.parse(articleUrl, html, { fallback: false });\n\n            // Update these values with the expected values from\n            // the article.\n            assert.equal(${key}, ${value ? \"'\" + value + \"'\" : \"''\"})\n          });\n    `;\n}\n\nexport default function (file, url, dir, result) {\n  return template`\n    import assert from 'assert';\n    import fs from 'fs';\n    import URL from 'url';\n    import cheerio from 'cheerio';\n\n    import Mercury from 'mercury';\n    import getExtractor from 'extractors/get-extractor';\n\n    // Rename CustomExtractor\n    describe('CustomExtractor', () => {\n      it('is selected properly', () => {\n        // To pass this test, rename your extractor in\n        // ${dir}/index.js\n        // (e.g., CustomExtractor => NYTimesExtractor)\n        // then add your new extractor to\n        // src/extractors/all.js\n        const url =\n          '${url}';\n        const extractor = getExtractor(url);\n        assert.equal(extractor.domain, URL.parse(url).hostname)\n      })\n\n        ${Reflect.ownKeys(result).map(k => testFor(k, result[k], dir, file, url)).join('\\n\\n')}\n\n      it('returns the content', async () => {\n        // To pass this test, fill out the content selector\n        // in ${dir}/index.js.\n        // You may also want to make use of the clean and transform\n        // options.\n        const html =\n          fs.readFileSync('${file}');\n        const url =\n          '${url}';\n\n        const { content } =\n          await Mercury.parse(url, html, { fallback: false });\n\n        const $ = cheerio.load(content || '');\n\n        const first13 = $('*').first()\n                              .text()\n                              .trim()\n                              .split(/\\\\s+/)\n                              .slice(0, 13)\n                              .join(' ')\n\n        // Update these values with the expected values from\n        // the article.\n        assert.equal(first13, null);\n      });\n    });\n  `;\n}\n","import fs from 'fs'\nimport URL from 'url'\nimport inquirer from 'inquirer'\nimport ora from 'ora'\n\nimport Mercury from '../dist/mercury'\nimport {\n  stripJunkTags,\n  makeLinksAbsolute,\n} from 'utils/dom'\nimport extractorTemplate from './templates/custom-extractor'\nimport extractorTestTemplate from './templates/custom-extractor-test'\n\nconst questions = [\n  {\n    type: 'input',\n    name: 'website',\n    message: 'Paste a url to an article you\\'d like to create or extend a parser for:',\n    validate(value) {\n      const { hostname } = URL.parse(value);\n      if (hostname) return true;\n\n      return false;\n    },\n  },\n];\n\ninquirer.prompt(questions).then((answers) => {\n  scaffoldCustomParser(answers.website);\n});\n\nlet spinner;\nfunction confirm(fn, args, msg, newParser) {\n  spinner = ora({ text: msg });\n  spinner.start();\n  const result = fn.apply(null, args);\n\n  if (result && result.then) {\n    result.then(r => savePage(r, args, newParser));\n  } else {\n    spinner.succeed();\n  }\n\n  return result;\n}\n\nfunction savePage($, [url], newParser) {\n  const { hostname } = URL.parse(url);\n\n  spinner.succeed();\n\n  const filename = new Date().getTime();\n  const file = `./fixtures/${hostname}/${filename}.html`;\n  // fix http(s) relative links:\n  makeLinksAbsolute($('*').first(), $, url)\n  $('[src], [href]').each((index, node) => {\n    const $node = $(node)\n    const link = $node.attr('src')\n    if (link && link.slice(0, 2) === '//') {\n      $node.attr('src', `http:${link}`)\n    }\n  })\n  const html = stripJunkTags($('*').first(), $, ['script']).html();\n\n  fs.writeFileSync(file, html);\n\n  const result = Mercury.parse(url, html).then((result) => {\n    if (newParser) {\n      confirm(generateScaffold, [url, file, result], 'Generating parser and tests');\n      console.log(`Your custom site extractor has been set up. To get started building it, run\n      npm run watch:test -- ${hostname}`)\n    } else {\n      console.log(`\n  It looks like you already have a custom parser for this url.\n  The page you linked to has been added to ${file}. Copy and paste\n  the following code to use that page in your tests:\n  const html = fs.readFileSync('${file}');`)\n    }\n  })\n}\n\nfunction generateScaffold(url, file, result) {\n  const { hostname } = URL.parse(url);\n  const extractor = extractorTemplate(hostname)\n  const extractorTest = extractorTestTemplate(file, url, getDir(url), result)\n\n  fs.writeFileSync(`${getDir(url)}/index.js`, extractor)\n  fs.writeFileSync(`${getDir(url)}/index.test.js`, extractorTest)\n}\n\nfunction confirmCreateDir(dir, msg) {\n  if (!fs.existsSync(dir)) {\n    confirm(fs.mkdirSync, [dir], msg);\n  }\n}\n\nfunction scaffoldCustomParser(url) {\n  const dir = getDir(url);\n  const { hostname } = URL.parse(url);\n  let newParser = false\n\n  if (!fs.existsSync(dir)) {\n    newParser = true\n    confirmCreateDir(dir, `Creating ${hostname} directory`);\n    confirmCreateDir(`./fixtures/${hostname}`, 'Creating fixtures directory');\n  }\n\n    confirm(Mercury.fetchResource, [url], 'Fetching fixture', newParser);\n}\n\nfunction getDir(url) {\n  const { hostname } = URL.parse(url);\n  return `./src/extractors/custom/${hostname}`;\n}\n"],"names":["ex","_interopDefault","require$$19","require$$18","require$$17","require$$16","require$$15","require$$14","require$$13","require$$12","require$$11","require$$10","require$$9","require$$8","require$$7","require$$6","require$$5","require$$4","require$$3","require$$2","require$$1","require$$0","range","map","_regeneratorRuntime","mark","arguments","length","undefined","wrap","_context","prev","next","start","end","stop","_marked","_ref","hostname","badUrl","error","messages","BAD_CONTENT_TYPES","join","options","resolve","reject","request","err","response","body","statusMessage","statusCode","parseNon2xx","headers","_response$headers","BAD_CONTENT_TYPES_RE","test","contentType","contentLength","MAX_CONTENT_LENGTH","_asyncToGenerator","url","parsedUrl","_ref3","URL","parse","encodeURI","_extends","REQUEST_HEADERS","timeout","FETCH_TIMEOUT","encoding","jar","gzip","followAllRedirects","sent","validateResponse","abrupt","t0","Errors","_callee","_x2","_x3","apply","$","from","to","each","_","node","$node","attr","value","removeAttr","convertMetaProp","img","_Reflect$ownKeys","attribs","forEach","IS_LINK","IS_IMAGE","index","type","root","find","contents","filter","isComment","remove","TAGS_TO_REMOVE","cleanComments","create","preparedResponse","validResponse","result","_this","generateDoc","includes","cheerio","load","content","normalizeWhitespace","children","normalizeMetaTags","convertLazyLoadedImages","clean","domain","selectors","transforms","h1","noscript","$children","get","tagName","title","author","dek","date_published","defaultCleaner","parents","$parent","prepend","$tweetContainer","append","tweets","replaceWith","s","src","replace","width","lead_image_url","next_page_url","excerpt","h2","NYMagExtractor","BloggerExtractor","WikipediaExtractor","TwitterExtractor","NYTimesExtractor","TheAtlanticExtractor","NewYorkerExtractor","WiredExtractor","MSNExtractor","YahooExtractor","BuzzfeedExtractor","WikiaExtractor","LittleThingsExtractor","PoliticoExtractor","REMOVE_ATTRS","selector","WHITELIST_ATTRS","REMOVE_EMPTY_TAGS","tag","HEADER_TAGS","NON_TOP_CANDIDATE_TAGS","PHOTO_HINTS","POSITIVE_SCORE_HINTS","NEGATIVE_SCORE_HINTS","EXTRANEOUS_LINK_HINTS","BLOCK_LEVEL_TAGS","UNLIKELY_CANDIDATES_BLACKLIST","candidatesBlacklist","UNLIKELY_CANDIDATES_WHITELIST","candidatesWhitelist","not","id","classes","CANDIDATES_WHITELIST","classAndId","CANDIDATES_BLACKLIST","element","nextElement","collapsing","paragraphize","br","nextSibling","sibling","BLOCK_LEVEL_TAGS_RE","appendTo","p","div","$div","DIV_TO_P_BLOCK_TAGS","convertable","convertNodeTo","span","$span","brsToPs","convertDivs","convertSpans","_$node$get","key","attribString","$img","parseInt","height","SPACER_RE","$article","cleanForHeight","removeSpacers","article","tags","STRIP_OUTPUT_TAGS","$hOnes","reduce","acc","WHITELIST_ATTRS_RE","_defineProperty","removeAllButWhitelist","$p","text","trim","NON_TOP_CANDIDATE_TAGS$1","PHOTO_HINTS$1","POSITIVE_SCORE_HINTS$1","NEGATIVE_SCORE_HINTS$1","BLOCK_LEVEL_TAGS$1","UNLIKELY_CANDIDATES_BLACKLIST$1","UNLIKELY_CANDIDATES_WHITELIST$1","POSITIVE_SCORE_RE$1","score","NEGATIVE_SCORE_RE$1","PHOTO_HINTS_RE$1","READABILITY_ASSET$1","match","textLength","chunks","idkRe","lengthBonus","min","Math","max","scoreCommas","scoreLength","slice","amount","getOrInitScore","setScore","e","parent","addScore","getScore","scoreNode","weightNodes","getWeight","addToParent","PARAGRAPH_SCORE_TAGS$1","CHILD_CONTENT_TAGS$1","BAD_TAGS$1","convertSpans$1","addScoreTo","rawScore","HNEWS_CONTENT_SELECTORS$1","_slicedToArray","_ref2","parentSelector","childSelector","scorePs","NORMALIZE_RE","regexList","re","matchRe","exec","PAGE_IN_HREF_RE","matches","pageNum","split","segment","firstSegmentHasLetters","IS_DIGIT_RE","goodSegment","toLowerCase","parsed","protocol","host","path","reverse","rawSegment","_segment$split","_segment$split2","IS_ALPHA_RE","fileExt","possibleSegment","HAS_ALPHA_RE","isGoodSegment","push","cleanedSegments","$candidate","topScore","NON_TOP_CANDIDATE_TAGS_RE$1","$sibling","siblingScore","wrappingDiv","linkDensity","density","contentBonus","newScore","siblingScoreThreshold","siblingContent","siblingContentLength","hasSentenceEnd","first","mergeSiblings","weight","hasClass","normalizeSpaces","inputCount","pCount","imgCount","nodeIsList","previousNode","scriptCount","CLEAN_CONDITIONALLY_TAGS","removeUnlessContent","HEADER_TAG_LIST","header","$header","prevAll","rootUrl","$content","absoluteUrl","linkText","totalTextLength","linkLength","metaNames","cachedNames","name","indexOf","_step","nodes","toArray","values","cleanTags","metaValue","stripTags","v","_getIterator","foundNames","_iteratorNormalCompletion","_iterator","done","_loop","_typeof","_ret","_didIteratorError","_iteratorError","return","maxChildren","withinComment","isGoodNode","textOnly","html","cleanText","class","IS_WP_SELECTOR","months","timestamp1","timestamp2","allMonths","CLEAN_AUTHOR_RE","leadImageUrl","validUrl","isWebUri","TEXT_LINK_RE","dekText","dateString","SPLIT_DATE_STRING","TIME_MERIDIAN_DOTS_RE","TIME_MERIDIAN_SPACE_RE","CLEAN_DATE_STRING_RE","MS_DATE_STRING","SEC_DATE_STRING","moment","date","isValid","cleanDateString","toISOString","cleanConditionally","_ref$cleanConditional","_ref$title","_ref$url","_ref$defaultCleaner","rewriteTopLevel","cleanImages","stripJunkTags","cleanHOnes","cleanHeaders","makeLinksAbsolute","cleanAttributes","removeEmpty","TITLE_SPLITTERS_RE","resolveSplitTitle","splitTitle","titleText","termCounts","_Reflect$ownKeys$redu","_Reflect$ownKeys$redu2","termCount","maxTerm","splitEnds","longestEnd","_URL$parse","DOMAIN_ENDINGS_RE","wuzzy","levenshtein","startSlug","nakedDomain","startSlugRatio","endSlug","endSlugRatio","extractBreadcrumbTitle","newTitle","cleanDomainFromTitle","cleanAuthor","clean$1","cleanDek","cleanDatePublished","extractCleanNode","cleanTitle","opts","stripUnlikelyCandidates","convertToParagraphs","scoreContent","findTopCandidate","defaultOpts","extract","getContentNode","nodeIsSufficient","cleanAndReturnNode","k","extractBestNode","metaCache","extractFromMeta","STRONG_TITLE_META_TAGS","extractFromSelectors","STRONG_TITLE_SELECTORS","WEAK_TITLE_META_TAGS","WEAK_TITLE_SELECTORS","bylineRe","AUTHOR_META_TAGS","AUTHOR_MAX_LENGTH","AUTHOR_SELECTORS","BYLINE_SELECTORS_RE","_ref4","regex","abbrevMonthsStr","datePublished","DATE_PUBLISHED_META_TAGS","DATE_PUBLISHED_SELECTORS","extractFromUrl","DATE_PUBLISHED_URL_RES","POSITIVE_LEAD_IMAGE_URL_HINTS","NEGATIVE_LEAD_IMAGE_URL_HINTS","POSITIVE_LEAD_IMAGE_URL_HINTS_RE","NEGATIVE_LEAD_IMAGE_URL_HINTS_RE","GIF_RE","JPG_RE","$figParent","$gParent","getSig","parseFloat","area","round","$imgs","LEAD_IMAGE_URL_META_TAGS","imageUrl","cleanUrl","imgs","scoreImageUrl","scoreAttr","scoreByParents","scoreBySibling","scoreByDimensions","scoreByPosition","imgScores","topUrl","LEAD_IMAGE_URL_SELECTORS","href","articleUrl","SequenceMatcher","ratio","similarity","diffPercent","diffModifier","linkTextAsNum","isWp","EXTRANEOUS_LINK_HINTS$1","EXTRANEOUS_LINK_HINTS_RE$1","$link","_Array$from","makeSig$1","positiveMatch","PAGE_RE","parentData","negativeMatch","NEGATIVE_SCORE_RE","POSITIVE_SCORE_RE","linkData","PREV_LINK_TEXT_RE$1","baseUrl","previousUrls","linkHost","DIGIT_RE$2","fragment","baseRegex","NEXT_LINK_TEXT_RE$1","CAP_LINK_TEXT_RE$1","links","_ref$previousUrls","makeBaseRegex","isWordpress","possiblePages","link","removeAnchor","shouldScore","makeSig","pageNumFromUrl","scoreBaseUrl","scoreNextLinkText","scoreCapLinks","scorePrevLink","scoreByParents$1","scoreExtraneousLinks","scorePageInLink","scoreLinkText","scoreSimilarity","possiblePage","scoredPages","articleBaseUrl","scoreLinks","scoredLinks","scoredLink","topPage","parseDomain","$canonical","CANONICAL_META_SELECTORS","metaUrl","maxLength","ellipse","EXCERPT_META_SELECTORS","shortContent","GenericTitleExtractor","GenericDatePublishedExtractor","GenericAuthorExtractor","GenericContentExtractor","bind","GenericLeadImageUrlExtractor","GenericDekExtractor","GenericNextPageUrlExtractor","url_and_domain","GenericUrlExtractor","GenericExcerptExtractor","word_count","GenericWordCountExtractor","direction","getDirection","_url_and_domain","_parsedUrl","Extractors","baseDomain","GenericExtractor","$matches","Array","isArray","_selector","extractionOpts","extractHtml","_opts$extractHtml","_extractionOpts$defau","findMatchingSelector","matchingSelector","transformElements","cleanBySelectors","Cleaners","_matchingSelector","extractor","fallback","_opts$fallback","select","_opts","contentOnly","extractedTitle","extractResult","_content","Extractor","extractorOpts","nextPageResult","pages","RootExtractor","total_pages","pages_rendered","_x","fetchAllPages","_result","_opts$fetchAllPages","validateUrl","getExtractor","rendered_pages","fetchResource","_context2","_callee2","_this2","module","exports","Mercury","REMOVE_ATTR_SELECTORS","REMOVE_ATTR_LIST","RegExp","REMOVE_EMPTY_SELECTORS","NON_TOP_CANDIDATE_TAGS_RE","PHOTO_HINTS_RE","EXTRANEOUS_LINK_HINTS_RE","absolutize","insertValues","strings","part","idx","toString","bodyPattern","trailingWhitespace","template","compiled","indentLevel","line","IGNORE","testFor","dir","file","questions","inquirer","prompt","then","answers","website","spinner","confirm","fn","args","msg","newParser","ora","savePage","r","succeed","filename","Date","getTime","writeFileSync","generateScaffold","log","extractorTemplate","extractorTest","extractorTestTemplate","getDir","confirmCreateDir","fs","existsSync","mkdirSync","scaffoldCustomParser"],"mappings":"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"}